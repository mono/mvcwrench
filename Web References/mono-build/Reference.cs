//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4927.
// 
#pragma warning disable 1591

namespace MvcWrench.mono_build {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServicesSoap", Namespace="http://monkeywrench.novell.com/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBRecord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WebServiceResponse))]
    public partial class WebServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateLanefileOperationCompleted;
        
        private System.Threading.SendOrPostCallback AttachFileToLaneOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeattachFileFromLaneOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditCommandFilenameOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditCommandSequenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditCommandArgumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditCommandTimeoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback SwitchCommandNonFatalOperationCompleted;
        
        private System.Threading.SendOrPostCallback SwitchCommandAlwaysExecuteOperationCompleted;
        
        private System.Threading.SendOrPostCallback SwitchCommandInternalOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCommandOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCommandOperationCompleted;
        
        private System.Threading.SendOrPostCallback SwitchHostEnabledForLaneOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveHostForLaneOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddHostToLaneOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDependencyToLaneOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditLaneDependencyFilenameOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteLaneDependencyOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditLaneDependencyDownloadsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlinkDeletionDirectiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDeletionDirectiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnableDeletionDirectiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFileDeletionDirectiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddLaneDeletionDirectiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindLaneDeletionDirectiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLaneOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHostForEditOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddMasterHostOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveMasterHostOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLaneForEditOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindHostOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindRevisionOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindLaneOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditLaneOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditHostOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditHostWithPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetViewLaneDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFrontPageDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFrontPageData2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLanesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHostsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloneLaneOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteLaneOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddLaneOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteHostOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddHostOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearRevisionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RescheduleRevisionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearWorkOperationCompleted;
        
        private System.Threading.SendOrPostCallback AbortWorkOperationCompleted;
        
        private System.Threading.SendOrPostCallback PauseWorkOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResumeWorkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetViewTableDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetViewWorkTableDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLaneFileForEditOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditLaneFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetViewLaneFileHistoryDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEnvironmentVariableOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditEnvironmentVariableOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteEnvironmentVariableOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadCompressedFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportBuildStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBuildInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBuildInfoMultipleOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindLatestWorkFileIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteSchedulerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteDeletionDirectivesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdminInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebServices() {
            this.Url = global::MvcWrench.Properties.Settings.Default.MvcMonkey_mono_build_WebServices;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetRolesCompletedEventHandler GetRolesCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event CreateLanefileCompletedEventHandler CreateLanefileCompleted;
        
        /// <remarks/>
        public event AttachFileToLaneCompletedEventHandler AttachFileToLaneCompleted;
        
        /// <remarks/>
        public event DeattachFileFromLaneCompletedEventHandler DeattachFileFromLaneCompleted;
        
        /// <remarks/>
        public event EditCommandFilenameCompletedEventHandler EditCommandFilenameCompleted;
        
        /// <remarks/>
        public event EditCommandSequenceCompletedEventHandler EditCommandSequenceCompleted;
        
        /// <remarks/>
        public event EditCommandArgumentsCompletedEventHandler EditCommandArgumentsCompleted;
        
        /// <remarks/>
        public event EditCommandTimeoutCompletedEventHandler EditCommandTimeoutCompleted;
        
        /// <remarks/>
        public event SwitchCommandNonFatalCompletedEventHandler SwitchCommandNonFatalCompleted;
        
        /// <remarks/>
        public event SwitchCommandAlwaysExecuteCompletedEventHandler SwitchCommandAlwaysExecuteCompleted;
        
        /// <remarks/>
        public event SwitchCommandInternalCompletedEventHandler SwitchCommandInternalCompleted;
        
        /// <remarks/>
        public event DeleteCommandCompletedEventHandler DeleteCommandCompleted;
        
        /// <remarks/>
        public event AddCommandCompletedEventHandler AddCommandCompleted;
        
        /// <remarks/>
        public event SwitchHostEnabledForLaneCompletedEventHandler SwitchHostEnabledForLaneCompleted;
        
        /// <remarks/>
        public event RemoveHostForLaneCompletedEventHandler RemoveHostForLaneCompleted;
        
        /// <remarks/>
        public event AddHostToLaneCompletedEventHandler AddHostToLaneCompleted;
        
        /// <remarks/>
        public event AddDependencyToLaneCompletedEventHandler AddDependencyToLaneCompleted;
        
        /// <remarks/>
        public event EditLaneDependencyFilenameCompletedEventHandler EditLaneDependencyFilenameCompleted;
        
        /// <remarks/>
        public event DeleteLaneDependencyCompletedEventHandler DeleteLaneDependencyCompleted;
        
        /// <remarks/>
        public event EditLaneDependencyDownloadsCompletedEventHandler EditLaneDependencyDownloadsCompleted;
        
        /// <remarks/>
        public event UnlinkDeletionDirectiveCompletedEventHandler UnlinkDeletionDirectiveCompleted;
        
        /// <remarks/>
        public event DeleteDeletionDirectiveCompletedEventHandler DeleteDeletionDirectiveCompleted;
        
        /// <remarks/>
        public event EnableDeletionDirectiveCompletedEventHandler EnableDeletionDirectiveCompleted;
        
        /// <remarks/>
        public event AddFileDeletionDirectiveCompletedEventHandler AddFileDeletionDirectiveCompleted;
        
        /// <remarks/>
        public event AddLaneDeletionDirectiveCompletedEventHandler AddLaneDeletionDirectiveCompleted;
        
        /// <remarks/>
        public event FindLaneDeletionDirectiveCompletedEventHandler FindLaneDeletionDirectiveCompleted;
        
        /// <remarks/>
        public event GetLaneCompletedEventHandler GetLaneCompleted;
        
        /// <remarks/>
        public event GetHostForEditCompletedEventHandler GetHostForEditCompleted;
        
        /// <remarks/>
        public event AddMasterHostCompletedEventHandler AddMasterHostCompleted;
        
        /// <remarks/>
        public event RemoveMasterHostCompletedEventHandler RemoveMasterHostCompleted;
        
        /// <remarks/>
        public event GetLaneForEditCompletedEventHandler GetLaneForEditCompleted;
        
        /// <remarks/>
        public event FindHostCompletedEventHandler FindHostCompleted;
        
        /// <remarks/>
        public event FindRevisionCompletedEventHandler FindRevisionCompleted;
        
        /// <remarks/>
        public event FindLaneCompletedEventHandler FindLaneCompleted;
        
        /// <remarks/>
        public event EditLaneCompletedEventHandler EditLaneCompleted;
        
        /// <remarks/>
        public event EditHostCompletedEventHandler EditHostCompleted;
        
        /// <remarks/>
        public event EditHostWithPasswordCompletedEventHandler EditHostWithPasswordCompleted;
        
        /// <remarks/>
        public event GetViewLaneDataCompletedEventHandler GetViewLaneDataCompleted;
        
        /// <remarks/>
        public event GetFrontPageDataCompletedEventHandler GetFrontPageDataCompleted;
        
        /// <remarks/>
        public event GetFrontPageData2CompletedEventHandler GetFrontPageData2Completed;
        
        /// <remarks/>
        public event GetLanesCompletedEventHandler GetLanesCompleted;
        
        /// <remarks/>
        public event GetHostsCompletedEventHandler GetHostsCompleted;
        
        /// <remarks/>
        public event CloneLaneCompletedEventHandler CloneLaneCompleted;
        
        /// <remarks/>
        public event DeleteLaneCompletedEventHandler DeleteLaneCompleted;
        
        /// <remarks/>
        public event AddLaneCompletedEventHandler AddLaneCompleted;
        
        /// <remarks/>
        public event DeleteHostCompletedEventHandler DeleteHostCompleted;
        
        /// <remarks/>
        public event AddHostCompletedEventHandler AddHostCompleted;
        
        /// <remarks/>
        public event ClearRevisionCompletedEventHandler ClearRevisionCompleted;
        
        /// <remarks/>
        public event RescheduleRevisionCompletedEventHandler RescheduleRevisionCompleted;
        
        /// <remarks/>
        public event ClearWorkCompletedEventHandler ClearWorkCompleted;
        
        /// <remarks/>
        public event AbortWorkCompletedEventHandler AbortWorkCompleted;
        
        /// <remarks/>
        public event PauseWorkCompletedEventHandler PauseWorkCompleted;
        
        /// <remarks/>
        public event ResumeWorkCompletedEventHandler ResumeWorkCompleted;
        
        /// <remarks/>
        public event GetViewTableDataCompletedEventHandler GetViewTableDataCompleted;
        
        /// <remarks/>
        public event GetViewWorkTableDataCompletedEventHandler GetViewWorkTableDataCompleted;
        
        /// <remarks/>
        public event GetLaneFileForEditCompletedEventHandler GetLaneFileForEditCompleted;
        
        /// <remarks/>
        public event EditLaneFileCompletedEventHandler EditLaneFileCompleted;
        
        /// <remarks/>
        public event GetViewLaneFileHistoryDataCompletedEventHandler GetViewLaneFileHistoryDataCompleted;
        
        /// <remarks/>
        public event GetUsersCompletedEventHandler GetUsersCompleted;
        
        /// <remarks/>
        public event AddEnvironmentVariableCompletedEventHandler AddEnvironmentVariableCompleted;
        
        /// <remarks/>
        public event EditEnvironmentVariableCompletedEventHandler EditEnvironmentVariableCompleted;
        
        /// <remarks/>
        public event DeleteEnvironmentVariableCompletedEventHandler DeleteEnvironmentVariableCompleted;
        
        /// <remarks/>
        public event UploadCompressedFileCompletedEventHandler UploadCompressedFileCompleted;
        
        /// <remarks/>
        public event UploadFileCompletedEventHandler UploadFileCompleted;
        
        /// <remarks/>
        public event GetWorkStateCompletedEventHandler GetWorkStateCompleted;
        
        /// <remarks/>
        public event ReportBuildStateCompletedEventHandler ReportBuildStateCompleted;
        
        /// <remarks/>
        public event GetBuildInfoCompletedEventHandler GetBuildInfoCompleted;
        
        /// <remarks/>
        public event GetBuildInfoMultipleCompletedEventHandler GetBuildInfoMultipleCompleted;
        
        /// <remarks/>
        public event FindLatestWorkFileIdCompletedEventHandler FindLatestWorkFileIdCompleted;
        
        /// <remarks/>
        public event ExecuteSchedulerCompletedEventHandler ExecuteSchedulerCompleted;
        
        /// <remarks/>
        public event ExecuteDeletionDirectivesCompletedEventHandler ExecuteDeletionDirectivesCompleted;
        
        /// <remarks/>
        public event GetAdminInfoCompletedEventHandler GetAdminInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetRoles", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetRoles(string user) {
            object[] results = this.Invoke("GetRoles", new object[] {
                        user});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRolesAsync(string user) {
            this.GetRolesAsync(user, null);
        }
        
        /// <remarks/>
        public void GetRolesAsync(string user, object userState) {
            if ((this.GetRolesOperationCompleted == null)) {
                this.GetRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRolesOperationCompleted);
            }
            this.InvokeAsync("GetRoles", new object[] {
                        user}, this.GetRolesOperationCompleted, userState);
        }
        
        private void OnGetRolesOperationCompleted(object arg) {
            if ((this.GetRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRolesCompleted(this, new GetRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/Login", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LoginResponse Login([System.Xml.Serialization.XmlElementAttribute("login")] WebServiceLogin login1) {
            object[] results = this.Invoke("Login", new object[] {
                        login1});
            return ((LoginResponse)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(WebServiceLogin login1) {
            this.LoginAsync(login1, null);
        }
        
        /// <remarks/>
        public void LoginAsync(WebServiceLogin login1, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        login1}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/CreateLanefile", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateLanefile(WebServiceLogin login, int lane_id, string filename) {
            this.Invoke("CreateLanefile", new object[] {
                        login,
                        lane_id,
                        filename});
        }
        
        /// <remarks/>
        public void CreateLanefileAsync(WebServiceLogin login, int lane_id, string filename) {
            this.CreateLanefileAsync(login, lane_id, filename, null);
        }
        
        /// <remarks/>
        public void CreateLanefileAsync(WebServiceLogin login, int lane_id, string filename, object userState) {
            if ((this.CreateLanefileOperationCompleted == null)) {
                this.CreateLanefileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateLanefileOperationCompleted);
            }
            this.InvokeAsync("CreateLanefile", new object[] {
                        login,
                        lane_id,
                        filename}, this.CreateLanefileOperationCompleted, userState);
        }
        
        private void OnCreateLanefileOperationCompleted(object arg) {
            if ((this.CreateLanefileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateLanefileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AttachFileToLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AttachFileToLane(WebServiceLogin login, int lane_id, int lanefile_id) {
            this.Invoke("AttachFileToLane", new object[] {
                        login,
                        lane_id,
                        lanefile_id});
        }
        
        /// <remarks/>
        public void AttachFileToLaneAsync(WebServiceLogin login, int lane_id, int lanefile_id) {
            this.AttachFileToLaneAsync(login, lane_id, lanefile_id, null);
        }
        
        /// <remarks/>
        public void AttachFileToLaneAsync(WebServiceLogin login, int lane_id, int lanefile_id, object userState) {
            if ((this.AttachFileToLaneOperationCompleted == null)) {
                this.AttachFileToLaneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAttachFileToLaneOperationCompleted);
            }
            this.InvokeAsync("AttachFileToLane", new object[] {
                        login,
                        lane_id,
                        lanefile_id}, this.AttachFileToLaneOperationCompleted, userState);
        }
        
        private void OnAttachFileToLaneOperationCompleted(object arg) {
            if ((this.AttachFileToLaneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AttachFileToLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeattachFileFromLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeattachFileFromLane(WebServiceLogin login, int lane_id, int lanefile_id) {
            this.Invoke("DeattachFileFromLane", new object[] {
                        login,
                        lane_id,
                        lanefile_id});
        }
        
        /// <remarks/>
        public void DeattachFileFromLaneAsync(WebServiceLogin login, int lane_id, int lanefile_id) {
            this.DeattachFileFromLaneAsync(login, lane_id, lanefile_id, null);
        }
        
        /// <remarks/>
        public void DeattachFileFromLaneAsync(WebServiceLogin login, int lane_id, int lanefile_id, object userState) {
            if ((this.DeattachFileFromLaneOperationCompleted == null)) {
                this.DeattachFileFromLaneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeattachFileFromLaneOperationCompleted);
            }
            this.InvokeAsync("DeattachFileFromLane", new object[] {
                        login,
                        lane_id,
                        lanefile_id}, this.DeattachFileFromLaneOperationCompleted, userState);
        }
        
        private void OnDeattachFileFromLaneOperationCompleted(object arg) {
            if ((this.DeattachFileFromLaneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeattachFileFromLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditCommandFilename", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditCommandFilename(WebServiceLogin login, int command_id, string filename) {
            this.Invoke("EditCommandFilename", new object[] {
                        login,
                        command_id,
                        filename});
        }
        
        /// <remarks/>
        public void EditCommandFilenameAsync(WebServiceLogin login, int command_id, string filename) {
            this.EditCommandFilenameAsync(login, command_id, filename, null);
        }
        
        /// <remarks/>
        public void EditCommandFilenameAsync(WebServiceLogin login, int command_id, string filename, object userState) {
            if ((this.EditCommandFilenameOperationCompleted == null)) {
                this.EditCommandFilenameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditCommandFilenameOperationCompleted);
            }
            this.InvokeAsync("EditCommandFilename", new object[] {
                        login,
                        command_id,
                        filename}, this.EditCommandFilenameOperationCompleted, userState);
        }
        
        private void OnEditCommandFilenameOperationCompleted(object arg) {
            if ((this.EditCommandFilenameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditCommandFilenameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditCommandSequence", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditCommandSequence(WebServiceLogin login, int command_id, int sequence) {
            this.Invoke("EditCommandSequence", new object[] {
                        login,
                        command_id,
                        sequence});
        }
        
        /// <remarks/>
        public void EditCommandSequenceAsync(WebServiceLogin login, int command_id, int sequence) {
            this.EditCommandSequenceAsync(login, command_id, sequence, null);
        }
        
        /// <remarks/>
        public void EditCommandSequenceAsync(WebServiceLogin login, int command_id, int sequence, object userState) {
            if ((this.EditCommandSequenceOperationCompleted == null)) {
                this.EditCommandSequenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditCommandSequenceOperationCompleted);
            }
            this.InvokeAsync("EditCommandSequence", new object[] {
                        login,
                        command_id,
                        sequence}, this.EditCommandSequenceOperationCompleted, userState);
        }
        
        private void OnEditCommandSequenceOperationCompleted(object arg) {
            if ((this.EditCommandSequenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditCommandSequenceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditCommandArguments", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditCommandArguments(WebServiceLogin login, int command_id, string arguments) {
            this.Invoke("EditCommandArguments", new object[] {
                        login,
                        command_id,
                        arguments});
        }
        
        /// <remarks/>
        public void EditCommandArgumentsAsync(WebServiceLogin login, int command_id, string arguments) {
            this.EditCommandArgumentsAsync(login, command_id, arguments, null);
        }
        
        /// <remarks/>
        public void EditCommandArgumentsAsync(WebServiceLogin login, int command_id, string arguments, object userState) {
            if ((this.EditCommandArgumentsOperationCompleted == null)) {
                this.EditCommandArgumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditCommandArgumentsOperationCompleted);
            }
            this.InvokeAsync("EditCommandArguments", new object[] {
                        login,
                        command_id,
                        arguments}, this.EditCommandArgumentsOperationCompleted, userState);
        }
        
        private void OnEditCommandArgumentsOperationCompleted(object arg) {
            if ((this.EditCommandArgumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditCommandArgumentsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditCommandTimeout", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditCommandTimeout(WebServiceLogin login, int command_id, int timeout) {
            this.Invoke("EditCommandTimeout", new object[] {
                        login,
                        command_id,
                        timeout});
        }
        
        /// <remarks/>
        public void EditCommandTimeoutAsync(WebServiceLogin login, int command_id, int timeout) {
            this.EditCommandTimeoutAsync(login, command_id, timeout, null);
        }
        
        /// <remarks/>
        public void EditCommandTimeoutAsync(WebServiceLogin login, int command_id, int timeout, object userState) {
            if ((this.EditCommandTimeoutOperationCompleted == null)) {
                this.EditCommandTimeoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditCommandTimeoutOperationCompleted);
            }
            this.InvokeAsync("EditCommandTimeout", new object[] {
                        login,
                        command_id,
                        timeout}, this.EditCommandTimeoutOperationCompleted, userState);
        }
        
        private void OnEditCommandTimeoutOperationCompleted(object arg) {
            if ((this.EditCommandTimeoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditCommandTimeoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/SwitchCommandNonFatal", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SwitchCommandNonFatal(WebServiceLogin login, int command_id) {
            this.Invoke("SwitchCommandNonFatal", new object[] {
                        login,
                        command_id});
        }
        
        /// <remarks/>
        public void SwitchCommandNonFatalAsync(WebServiceLogin login, int command_id) {
            this.SwitchCommandNonFatalAsync(login, command_id, null);
        }
        
        /// <remarks/>
        public void SwitchCommandNonFatalAsync(WebServiceLogin login, int command_id, object userState) {
            if ((this.SwitchCommandNonFatalOperationCompleted == null)) {
                this.SwitchCommandNonFatalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSwitchCommandNonFatalOperationCompleted);
            }
            this.InvokeAsync("SwitchCommandNonFatal", new object[] {
                        login,
                        command_id}, this.SwitchCommandNonFatalOperationCompleted, userState);
        }
        
        private void OnSwitchCommandNonFatalOperationCompleted(object arg) {
            if ((this.SwitchCommandNonFatalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SwitchCommandNonFatalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/SwitchCommandAlwaysExecute", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SwitchCommandAlwaysExecute(WebServiceLogin login, int command_id) {
            this.Invoke("SwitchCommandAlwaysExecute", new object[] {
                        login,
                        command_id});
        }
        
        /// <remarks/>
        public void SwitchCommandAlwaysExecuteAsync(WebServiceLogin login, int command_id) {
            this.SwitchCommandAlwaysExecuteAsync(login, command_id, null);
        }
        
        /// <remarks/>
        public void SwitchCommandAlwaysExecuteAsync(WebServiceLogin login, int command_id, object userState) {
            if ((this.SwitchCommandAlwaysExecuteOperationCompleted == null)) {
                this.SwitchCommandAlwaysExecuteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSwitchCommandAlwaysExecuteOperationCompleted);
            }
            this.InvokeAsync("SwitchCommandAlwaysExecute", new object[] {
                        login,
                        command_id}, this.SwitchCommandAlwaysExecuteOperationCompleted, userState);
        }
        
        private void OnSwitchCommandAlwaysExecuteOperationCompleted(object arg) {
            if ((this.SwitchCommandAlwaysExecuteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SwitchCommandAlwaysExecuteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/SwitchCommandInternal", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SwitchCommandInternal(WebServiceLogin login, int command_id) {
            this.Invoke("SwitchCommandInternal", new object[] {
                        login,
                        command_id});
        }
        
        /// <remarks/>
        public void SwitchCommandInternalAsync(WebServiceLogin login, int command_id) {
            this.SwitchCommandInternalAsync(login, command_id, null);
        }
        
        /// <remarks/>
        public void SwitchCommandInternalAsync(WebServiceLogin login, int command_id, object userState) {
            if ((this.SwitchCommandInternalOperationCompleted == null)) {
                this.SwitchCommandInternalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSwitchCommandInternalOperationCompleted);
            }
            this.InvokeAsync("SwitchCommandInternal", new object[] {
                        login,
                        command_id}, this.SwitchCommandInternalOperationCompleted, userState);
        }
        
        private void OnSwitchCommandInternalOperationCompleted(object arg) {
            if ((this.SwitchCommandInternalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SwitchCommandInternalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeleteCommand", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteCommand(WebServiceLogin login, int command_id) {
            this.Invoke("DeleteCommand", new object[] {
                        login,
                        command_id});
        }
        
        /// <remarks/>
        public void DeleteCommandAsync(WebServiceLogin login, int command_id) {
            this.DeleteCommandAsync(login, command_id, null);
        }
        
        /// <remarks/>
        public void DeleteCommandAsync(WebServiceLogin login, int command_id, object userState) {
            if ((this.DeleteCommandOperationCompleted == null)) {
                this.DeleteCommandOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCommandOperationCompleted);
            }
            this.InvokeAsync("DeleteCommand", new object[] {
                        login,
                        command_id}, this.DeleteCommandOperationCompleted, userState);
        }
        
        private void OnDeleteCommandOperationCompleted(object arg) {
            if ((this.DeleteCommandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCommandCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddCommand", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddCommand(WebServiceLogin login, int lane_id, string command, bool always_execute, bool nonfatal, int timeout, int sequence) {
            this.Invoke("AddCommand", new object[] {
                        login,
                        lane_id,
                        command,
                        always_execute,
                        nonfatal,
                        timeout,
                        sequence});
        }
        
        /// <remarks/>
        public void AddCommandAsync(WebServiceLogin login, int lane_id, string command, bool always_execute, bool nonfatal, int timeout, int sequence) {
            this.AddCommandAsync(login, lane_id, command, always_execute, nonfatal, timeout, sequence, null);
        }
        
        /// <remarks/>
        public void AddCommandAsync(WebServiceLogin login, int lane_id, string command, bool always_execute, bool nonfatal, int timeout, int sequence, object userState) {
            if ((this.AddCommandOperationCompleted == null)) {
                this.AddCommandOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCommandOperationCompleted);
            }
            this.InvokeAsync("AddCommand", new object[] {
                        login,
                        lane_id,
                        command,
                        always_execute,
                        nonfatal,
                        timeout,
                        sequence}, this.AddCommandOperationCompleted, userState);
        }
        
        private void OnAddCommandOperationCompleted(object arg) {
            if ((this.AddCommandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCommandCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/SwitchHostEnabledForLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SwitchHostEnabledForLane(WebServiceLogin login, int lane_id, int host_id) {
            this.Invoke("SwitchHostEnabledForLane", new object[] {
                        login,
                        lane_id,
                        host_id});
        }
        
        /// <remarks/>
        public void SwitchHostEnabledForLaneAsync(WebServiceLogin login, int lane_id, int host_id) {
            this.SwitchHostEnabledForLaneAsync(login, lane_id, host_id, null);
        }
        
        /// <remarks/>
        public void SwitchHostEnabledForLaneAsync(WebServiceLogin login, int lane_id, int host_id, object userState) {
            if ((this.SwitchHostEnabledForLaneOperationCompleted == null)) {
                this.SwitchHostEnabledForLaneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSwitchHostEnabledForLaneOperationCompleted);
            }
            this.InvokeAsync("SwitchHostEnabledForLane", new object[] {
                        login,
                        lane_id,
                        host_id}, this.SwitchHostEnabledForLaneOperationCompleted, userState);
        }
        
        private void OnSwitchHostEnabledForLaneOperationCompleted(object arg) {
            if ((this.SwitchHostEnabledForLaneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SwitchHostEnabledForLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/RemoveHostForLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveHostForLane(WebServiceLogin login, int lane_id, int host_id) {
            this.Invoke("RemoveHostForLane", new object[] {
                        login,
                        lane_id,
                        host_id});
        }
        
        /// <remarks/>
        public void RemoveHostForLaneAsync(WebServiceLogin login, int lane_id, int host_id) {
            this.RemoveHostForLaneAsync(login, lane_id, host_id, null);
        }
        
        /// <remarks/>
        public void RemoveHostForLaneAsync(WebServiceLogin login, int lane_id, int host_id, object userState) {
            if ((this.RemoveHostForLaneOperationCompleted == null)) {
                this.RemoveHostForLaneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveHostForLaneOperationCompleted);
            }
            this.InvokeAsync("RemoveHostForLane", new object[] {
                        login,
                        lane_id,
                        host_id}, this.RemoveHostForLaneOperationCompleted, userState);
        }
        
        private void OnRemoveHostForLaneOperationCompleted(object arg) {
            if ((this.RemoveHostForLaneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveHostForLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddHostToLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddHostToLane(WebServiceLogin login, int lane_id, int host_id) {
            this.Invoke("AddHostToLane", new object[] {
                        login,
                        lane_id,
                        host_id});
        }
        
        /// <remarks/>
        public void AddHostToLaneAsync(WebServiceLogin login, int lane_id, int host_id) {
            this.AddHostToLaneAsync(login, lane_id, host_id, null);
        }
        
        /// <remarks/>
        public void AddHostToLaneAsync(WebServiceLogin login, int lane_id, int host_id, object userState) {
            if ((this.AddHostToLaneOperationCompleted == null)) {
                this.AddHostToLaneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddHostToLaneOperationCompleted);
            }
            this.InvokeAsync("AddHostToLane", new object[] {
                        login,
                        lane_id,
                        host_id}, this.AddHostToLaneOperationCompleted, userState);
        }
        
        private void OnAddHostToLaneOperationCompleted(object arg) {
            if ((this.AddHostToLaneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddHostToLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddDependencyToLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddDependencyToLane(WebServiceLogin login, int lane_id, int dependent_lane_id, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> host_id, DBLaneDependencyCondition condition) {
            this.Invoke("AddDependencyToLane", new object[] {
                        login,
                        lane_id,
                        dependent_lane_id,
                        host_id,
                        condition});
        }
        
        /// <remarks/>
        public void AddDependencyToLaneAsync(WebServiceLogin login, int lane_id, int dependent_lane_id, System.Nullable<int> host_id, DBLaneDependencyCondition condition) {
            this.AddDependencyToLaneAsync(login, lane_id, dependent_lane_id, host_id, condition, null);
        }
        
        /// <remarks/>
        public void AddDependencyToLaneAsync(WebServiceLogin login, int lane_id, int dependent_lane_id, System.Nullable<int> host_id, DBLaneDependencyCondition condition, object userState) {
            if ((this.AddDependencyToLaneOperationCompleted == null)) {
                this.AddDependencyToLaneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDependencyToLaneOperationCompleted);
            }
            this.InvokeAsync("AddDependencyToLane", new object[] {
                        login,
                        lane_id,
                        dependent_lane_id,
                        host_id,
                        condition}, this.AddDependencyToLaneOperationCompleted, userState);
        }
        
        private void OnAddDependencyToLaneOperationCompleted(object arg) {
            if ((this.AddDependencyToLaneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDependencyToLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditLaneDependencyFilename", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditLaneDependencyFilename(WebServiceLogin login, int lanedependency_id, string filename) {
            this.Invoke("EditLaneDependencyFilename", new object[] {
                        login,
                        lanedependency_id,
                        filename});
        }
        
        /// <remarks/>
        public void EditLaneDependencyFilenameAsync(WebServiceLogin login, int lanedependency_id, string filename) {
            this.EditLaneDependencyFilenameAsync(login, lanedependency_id, filename, null);
        }
        
        /// <remarks/>
        public void EditLaneDependencyFilenameAsync(WebServiceLogin login, int lanedependency_id, string filename, object userState) {
            if ((this.EditLaneDependencyFilenameOperationCompleted == null)) {
                this.EditLaneDependencyFilenameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditLaneDependencyFilenameOperationCompleted);
            }
            this.InvokeAsync("EditLaneDependencyFilename", new object[] {
                        login,
                        lanedependency_id,
                        filename}, this.EditLaneDependencyFilenameOperationCompleted, userState);
        }
        
        private void OnEditLaneDependencyFilenameOperationCompleted(object arg) {
            if ((this.EditLaneDependencyFilenameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditLaneDependencyFilenameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeleteLaneDependency", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteLaneDependency(WebServiceLogin login, int lanedependency_id) {
            this.Invoke("DeleteLaneDependency", new object[] {
                        login,
                        lanedependency_id});
        }
        
        /// <remarks/>
        public void DeleteLaneDependencyAsync(WebServiceLogin login, int lanedependency_id) {
            this.DeleteLaneDependencyAsync(login, lanedependency_id, null);
        }
        
        /// <remarks/>
        public void DeleteLaneDependencyAsync(WebServiceLogin login, int lanedependency_id, object userState) {
            if ((this.DeleteLaneDependencyOperationCompleted == null)) {
                this.DeleteLaneDependencyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteLaneDependencyOperationCompleted);
            }
            this.InvokeAsync("DeleteLaneDependency", new object[] {
                        login,
                        lanedependency_id}, this.DeleteLaneDependencyOperationCompleted, userState);
        }
        
        private void OnDeleteLaneDependencyOperationCompleted(object arg) {
            if ((this.DeleteLaneDependencyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteLaneDependencyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditLaneDependencyDownloads", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditLaneDependencyDownloads(WebServiceLogin login, int lanedependency_id, string downloads) {
            this.Invoke("EditLaneDependencyDownloads", new object[] {
                        login,
                        lanedependency_id,
                        downloads});
        }
        
        /// <remarks/>
        public void EditLaneDependencyDownloadsAsync(WebServiceLogin login, int lanedependency_id, string downloads) {
            this.EditLaneDependencyDownloadsAsync(login, lanedependency_id, downloads, null);
        }
        
        /// <remarks/>
        public void EditLaneDependencyDownloadsAsync(WebServiceLogin login, int lanedependency_id, string downloads, object userState) {
            if ((this.EditLaneDependencyDownloadsOperationCompleted == null)) {
                this.EditLaneDependencyDownloadsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditLaneDependencyDownloadsOperationCompleted);
            }
            this.InvokeAsync("EditLaneDependencyDownloads", new object[] {
                        login,
                        lanedependency_id,
                        downloads}, this.EditLaneDependencyDownloadsOperationCompleted, userState);
        }
        
        private void OnEditLaneDependencyDownloadsOperationCompleted(object arg) {
            if ((this.EditLaneDependencyDownloadsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditLaneDependencyDownloadsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/UnlinkDeletionDirective", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnlinkDeletionDirective(WebServiceLogin login, int directive_id) {
            this.Invoke("UnlinkDeletionDirective", new object[] {
                        login,
                        directive_id});
        }
        
        /// <remarks/>
        public void UnlinkDeletionDirectiveAsync(WebServiceLogin login, int directive_id) {
            this.UnlinkDeletionDirectiveAsync(login, directive_id, null);
        }
        
        /// <remarks/>
        public void UnlinkDeletionDirectiveAsync(WebServiceLogin login, int directive_id, object userState) {
            if ((this.UnlinkDeletionDirectiveOperationCompleted == null)) {
                this.UnlinkDeletionDirectiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlinkDeletionDirectiveOperationCompleted);
            }
            this.InvokeAsync("UnlinkDeletionDirective", new object[] {
                        login,
                        directive_id}, this.UnlinkDeletionDirectiveOperationCompleted, userState);
        }
        
        private void OnUnlinkDeletionDirectiveOperationCompleted(object arg) {
            if ((this.UnlinkDeletionDirectiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlinkDeletionDirectiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeleteDeletionDirective", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteDeletionDirective(WebServiceLogin login, int lane_directive_id, int file_directive_id) {
            this.Invoke("DeleteDeletionDirective", new object[] {
                        login,
                        lane_directive_id,
                        file_directive_id});
        }
        
        /// <remarks/>
        public void DeleteDeletionDirectiveAsync(WebServiceLogin login, int lane_directive_id, int file_directive_id) {
            this.DeleteDeletionDirectiveAsync(login, lane_directive_id, file_directive_id, null);
        }
        
        /// <remarks/>
        public void DeleteDeletionDirectiveAsync(WebServiceLogin login, int lane_directive_id, int file_directive_id, object userState) {
            if ((this.DeleteDeletionDirectiveOperationCompleted == null)) {
                this.DeleteDeletionDirectiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDeletionDirectiveOperationCompleted);
            }
            this.InvokeAsync("DeleteDeletionDirective", new object[] {
                        login,
                        lane_directive_id,
                        file_directive_id}, this.DeleteDeletionDirectiveOperationCompleted, userState);
        }
        
        private void OnDeleteDeletionDirectiveOperationCompleted(object arg) {
            if ((this.DeleteDeletionDirectiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDeletionDirectiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EnableDeletionDirective", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EnableDeletionDirective(WebServiceLogin login, int lane_deletion_directive_id, bool enabled) {
            this.Invoke("EnableDeletionDirective", new object[] {
                        login,
                        lane_deletion_directive_id,
                        enabled});
        }
        
        /// <remarks/>
        public void EnableDeletionDirectiveAsync(WebServiceLogin login, int lane_deletion_directive_id, bool enabled) {
            this.EnableDeletionDirectiveAsync(login, lane_deletion_directive_id, enabled, null);
        }
        
        /// <remarks/>
        public void EnableDeletionDirectiveAsync(WebServiceLogin login, int lane_deletion_directive_id, bool enabled, object userState) {
            if ((this.EnableDeletionDirectiveOperationCompleted == null)) {
                this.EnableDeletionDirectiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableDeletionDirectiveOperationCompleted);
            }
            this.InvokeAsync("EnableDeletionDirective", new object[] {
                        login,
                        lane_deletion_directive_id,
                        enabled}, this.EnableDeletionDirectiveOperationCompleted, userState);
        }
        
        private void OnEnableDeletionDirectiveOperationCompleted(object arg) {
            if ((this.EnableDeletionDirectiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnableDeletionDirectiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddFileDeletionDirective", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddFileDeletionDirective(WebServiceLogin login, string filename, string name, DBMatchMode match_mode, int x, DBDeleteCondition condition) {
            object[] results = this.Invoke("AddFileDeletionDirective", new object[] {
                        login,
                        filename,
                        name,
                        match_mode,
                        x,
                        condition});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddFileDeletionDirectiveAsync(WebServiceLogin login, string filename, string name, DBMatchMode match_mode, int x, DBDeleteCondition condition) {
            this.AddFileDeletionDirectiveAsync(login, filename, name, match_mode, x, condition, null);
        }
        
        /// <remarks/>
        public void AddFileDeletionDirectiveAsync(WebServiceLogin login, string filename, string name, DBMatchMode match_mode, int x, DBDeleteCondition condition, object userState) {
            if ((this.AddFileDeletionDirectiveOperationCompleted == null)) {
                this.AddFileDeletionDirectiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFileDeletionDirectiveOperationCompleted);
            }
            this.InvokeAsync("AddFileDeletionDirective", new object[] {
                        login,
                        filename,
                        name,
                        match_mode,
                        x,
                        condition}, this.AddFileDeletionDirectiveOperationCompleted, userState);
        }
        
        private void OnAddFileDeletionDirectiveOperationCompleted(object arg) {
            if ((this.AddFileDeletionDirectiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFileDeletionDirectiveCompleted(this, new AddFileDeletionDirectiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddLaneDeletionDirective", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddLaneDeletionDirective(WebServiceLogin login, int file_deletion_directive_id, int lane_id) {
            object[] results = this.Invoke("AddLaneDeletionDirective", new object[] {
                        login,
                        file_deletion_directive_id,
                        lane_id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddLaneDeletionDirectiveAsync(WebServiceLogin login, int file_deletion_directive_id, int lane_id) {
            this.AddLaneDeletionDirectiveAsync(login, file_deletion_directive_id, lane_id, null);
        }
        
        /// <remarks/>
        public void AddLaneDeletionDirectiveAsync(WebServiceLogin login, int file_deletion_directive_id, int lane_id, object userState) {
            if ((this.AddLaneDeletionDirectiveOperationCompleted == null)) {
                this.AddLaneDeletionDirectiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddLaneDeletionDirectiveOperationCompleted);
            }
            this.InvokeAsync("AddLaneDeletionDirective", new object[] {
                        login,
                        file_deletion_directive_id,
                        lane_id}, this.AddLaneDeletionDirectiveOperationCompleted, userState);
        }
        
        private void OnAddLaneDeletionDirectiveOperationCompleted(object arg) {
            if ((this.AddLaneDeletionDirectiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddLaneDeletionDirectiveCompleted(this, new AddLaneDeletionDirectiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/FindLaneDeletionDirective", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DBLaneDeletionDirectiveView FindLaneDeletionDirective(WebServiceLogin login, int file_deletion_directive_id, int lane_id) {
            object[] results = this.Invoke("FindLaneDeletionDirective", new object[] {
                        login,
                        file_deletion_directive_id,
                        lane_id});
            return ((DBLaneDeletionDirectiveView)(results[0]));
        }
        
        /// <remarks/>
        public void FindLaneDeletionDirectiveAsync(WebServiceLogin login, int file_deletion_directive_id, int lane_id) {
            this.FindLaneDeletionDirectiveAsync(login, file_deletion_directive_id, lane_id, null);
        }
        
        /// <remarks/>
        public void FindLaneDeletionDirectiveAsync(WebServiceLogin login, int file_deletion_directive_id, int lane_id, object userState) {
            if ((this.FindLaneDeletionDirectiveOperationCompleted == null)) {
                this.FindLaneDeletionDirectiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindLaneDeletionDirectiveOperationCompleted);
            }
            this.InvokeAsync("FindLaneDeletionDirective", new object[] {
                        login,
                        file_deletion_directive_id,
                        lane_id}, this.FindLaneDeletionDirectiveOperationCompleted, userState);
        }
        
        private void OnFindLaneDeletionDirectiveOperationCompleted(object arg) {
            if ((this.FindLaneDeletionDirectiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindLaneDeletionDirectiveCompleted(this, new FindLaneDeletionDirectiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetLaneResponse GetLane(WebServiceLogin login, int lane_id) {
            object[] results = this.Invoke("GetLane", new object[] {
                        login,
                        lane_id});
            return ((GetLaneResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetLaneAsync(WebServiceLogin login, int lane_id) {
            this.GetLaneAsync(login, lane_id, null);
        }
        
        /// <remarks/>
        public void GetLaneAsync(WebServiceLogin login, int lane_id, object userState) {
            if ((this.GetLaneOperationCompleted == null)) {
                this.GetLaneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLaneOperationCompleted);
            }
            this.InvokeAsync("GetLane", new object[] {
                        login,
                        lane_id}, this.GetLaneOperationCompleted, userState);
        }
        
        private void OnGetLaneOperationCompleted(object arg) {
            if ((this.GetLaneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLaneCompleted(this, new GetLaneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetHostForEdit", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetHostForEditResponse GetHostForEdit(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> host_id, string host) {
            object[] results = this.Invoke("GetHostForEdit", new object[] {
                        login,
                        host_id,
                        host});
            return ((GetHostForEditResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetHostForEditAsync(WebServiceLogin login, System.Nullable<int> host_id, string host) {
            this.GetHostForEditAsync(login, host_id, host, null);
        }
        
        /// <remarks/>
        public void GetHostForEditAsync(WebServiceLogin login, System.Nullable<int> host_id, string host, object userState) {
            if ((this.GetHostForEditOperationCompleted == null)) {
                this.GetHostForEditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHostForEditOperationCompleted);
            }
            this.InvokeAsync("GetHostForEdit", new object[] {
                        login,
                        host_id,
                        host}, this.GetHostForEditOperationCompleted, userState);
        }
        
        private void OnGetHostForEditOperationCompleted(object arg) {
            if ((this.GetHostForEditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHostForEditCompleted(this, new GetHostForEditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddMasterHost", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddMasterHost(WebServiceLogin login, int host_id, int masterhost_id) {
            this.Invoke("AddMasterHost", new object[] {
                        login,
                        host_id,
                        masterhost_id});
        }
        
        /// <remarks/>
        public void AddMasterHostAsync(WebServiceLogin login, int host_id, int masterhost_id) {
            this.AddMasterHostAsync(login, host_id, masterhost_id, null);
        }
        
        /// <remarks/>
        public void AddMasterHostAsync(WebServiceLogin login, int host_id, int masterhost_id, object userState) {
            if ((this.AddMasterHostOperationCompleted == null)) {
                this.AddMasterHostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMasterHostOperationCompleted);
            }
            this.InvokeAsync("AddMasterHost", new object[] {
                        login,
                        host_id,
                        masterhost_id}, this.AddMasterHostOperationCompleted, userState);
        }
        
        private void OnAddMasterHostOperationCompleted(object arg) {
            if ((this.AddMasterHostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMasterHostCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/RemoveMasterHost", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveMasterHost(WebServiceLogin login, int host_id, int masterhost_id) {
            this.Invoke("RemoveMasterHost", new object[] {
                        login,
                        host_id,
                        masterhost_id});
        }
        
        /// <remarks/>
        public void RemoveMasterHostAsync(WebServiceLogin login, int host_id, int masterhost_id) {
            this.RemoveMasterHostAsync(login, host_id, masterhost_id, null);
        }
        
        /// <remarks/>
        public void RemoveMasterHostAsync(WebServiceLogin login, int host_id, int masterhost_id, object userState) {
            if ((this.RemoveMasterHostOperationCompleted == null)) {
                this.RemoveMasterHostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveMasterHostOperationCompleted);
            }
            this.InvokeAsync("RemoveMasterHost", new object[] {
                        login,
                        host_id,
                        masterhost_id}, this.RemoveMasterHostOperationCompleted, userState);
        }
        
        private void OnRemoveMasterHostOperationCompleted(object arg) {
            if ((this.RemoveMasterHostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveMasterHostCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetLaneForEdit", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetLaneForEditResponse GetLaneForEdit(WebServiceLogin login, int lane_id, string lane) {
            object[] results = this.Invoke("GetLaneForEdit", new object[] {
                        login,
                        lane_id,
                        lane});
            return ((GetLaneForEditResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetLaneForEditAsync(WebServiceLogin login, int lane_id, string lane) {
            this.GetLaneForEditAsync(login, lane_id, lane, null);
        }
        
        /// <remarks/>
        public void GetLaneForEditAsync(WebServiceLogin login, int lane_id, string lane, object userState) {
            if ((this.GetLaneForEditOperationCompleted == null)) {
                this.GetLaneForEditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLaneForEditOperationCompleted);
            }
            this.InvokeAsync("GetLaneForEdit", new object[] {
                        login,
                        lane_id,
                        lane}, this.GetLaneForEditOperationCompleted, userState);
        }
        
        private void OnGetLaneForEditOperationCompleted(object arg) {
            if ((this.GetLaneForEditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLaneForEditCompleted(this, new GetLaneForEditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/FindHost", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindHostResponse FindHost(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> host_id, string host) {
            object[] results = this.Invoke("FindHost", new object[] {
                        login,
                        host_id,
                        host});
            return ((FindHostResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FindHostAsync(WebServiceLogin login, System.Nullable<int> host_id, string host) {
            this.FindHostAsync(login, host_id, host, null);
        }
        
        /// <remarks/>
        public void FindHostAsync(WebServiceLogin login, System.Nullable<int> host_id, string host, object userState) {
            if ((this.FindHostOperationCompleted == null)) {
                this.FindHostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindHostOperationCompleted);
            }
            this.InvokeAsync("FindHost", new object[] {
                        login,
                        host_id,
                        host}, this.FindHostOperationCompleted, userState);
        }
        
        private void OnFindHostOperationCompleted(object arg) {
            if ((this.FindHostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindHostCompleted(this, new FindHostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/FindRevision", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindRevisionResponse FindRevision(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> revision_id, string revision) {
            object[] results = this.Invoke("FindRevision", new object[] {
                        login,
                        revision_id,
                        revision});
            return ((FindRevisionResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FindRevisionAsync(WebServiceLogin login, System.Nullable<int> revision_id, string revision) {
            this.FindRevisionAsync(login, revision_id, revision, null);
        }
        
        /// <remarks/>
        public void FindRevisionAsync(WebServiceLogin login, System.Nullable<int> revision_id, string revision, object userState) {
            if ((this.FindRevisionOperationCompleted == null)) {
                this.FindRevisionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindRevisionOperationCompleted);
            }
            this.InvokeAsync("FindRevision", new object[] {
                        login,
                        revision_id,
                        revision}, this.FindRevisionOperationCompleted, userState);
        }
        
        private void OnFindRevisionOperationCompleted(object arg) {
            if ((this.FindRevisionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindRevisionCompleted(this, new FindRevisionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/FindLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindLaneResponse FindLane(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> lane_id, string lane) {
            object[] results = this.Invoke("FindLane", new object[] {
                        login,
                        lane_id,
                        lane});
            return ((FindLaneResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FindLaneAsync(WebServiceLogin login, System.Nullable<int> lane_id, string lane) {
            this.FindLaneAsync(login, lane_id, lane, null);
        }
        
        /// <remarks/>
        public void FindLaneAsync(WebServiceLogin login, System.Nullable<int> lane_id, string lane, object userState) {
            if ((this.FindLaneOperationCompleted == null)) {
                this.FindLaneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindLaneOperationCompleted);
            }
            this.InvokeAsync("FindLane", new object[] {
                        login,
                        lane_id,
                        lane}, this.FindLaneOperationCompleted, userState);
        }
        
        private void OnFindLaneOperationCompleted(object arg) {
            if ((this.FindLaneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindLaneCompleted(this, new FindLaneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditLane(WebServiceLogin login, DBLane lane) {
            this.Invoke("EditLane", new object[] {
                        login,
                        lane});
        }
        
        /// <remarks/>
        public void EditLaneAsync(WebServiceLogin login, DBLane lane) {
            this.EditLaneAsync(login, lane, null);
        }
        
        /// <remarks/>
        public void EditLaneAsync(WebServiceLogin login, DBLane lane, object userState) {
            if ((this.EditLaneOperationCompleted == null)) {
                this.EditLaneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditLaneOperationCompleted);
            }
            this.InvokeAsync("EditLane", new object[] {
                        login,
                        lane}, this.EditLaneOperationCompleted, userState);
        }
        
        private void OnEditLaneOperationCompleted(object arg) {
            if ((this.EditLaneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditHost", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditHost(WebServiceLogin login, DBHost host) {
            this.Invoke("EditHost", new object[] {
                        login,
                        host});
        }
        
        /// <remarks/>
        public void EditHostAsync(WebServiceLogin login, DBHost host) {
            this.EditHostAsync(login, host, null);
        }
        
        /// <remarks/>
        public void EditHostAsync(WebServiceLogin login, DBHost host, object userState) {
            if ((this.EditHostOperationCompleted == null)) {
                this.EditHostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditHostOperationCompleted);
            }
            this.InvokeAsync("EditHost", new object[] {
                        login,
                        host}, this.EditHostOperationCompleted, userState);
        }
        
        private void OnEditHostOperationCompleted(object arg) {
            if ((this.EditHostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditHostCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditHostWithPassword", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditHostWithPassword(WebServiceLogin login, DBHost host, string password) {
            this.Invoke("EditHostWithPassword", new object[] {
                        login,
                        host,
                        password});
        }
        
        /// <remarks/>
        public void EditHostWithPasswordAsync(WebServiceLogin login, DBHost host, string password) {
            this.EditHostWithPasswordAsync(login, host, password, null);
        }
        
        /// <remarks/>
        public void EditHostWithPasswordAsync(WebServiceLogin login, DBHost host, string password, object userState) {
            if ((this.EditHostWithPasswordOperationCompleted == null)) {
                this.EditHostWithPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditHostWithPasswordOperationCompleted);
            }
            this.InvokeAsync("EditHostWithPassword", new object[] {
                        login,
                        host,
                        password}, this.EditHostWithPasswordOperationCompleted, userState);
        }
        
        private void OnEditHostWithPasswordOperationCompleted(object arg) {
            if ((this.EditHostWithPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditHostWithPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetViewLaneData", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetViewLaneDataResponse GetViewLaneData(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> lane_id, string lane, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> host_id, string host, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> revision_id, string revision) {
            object[] results = this.Invoke("GetViewLaneData", new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        revision_id,
                        revision});
            return ((GetViewLaneDataResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetViewLaneDataAsync(WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> revision_id, string revision) {
            this.GetViewLaneDataAsync(login, lane_id, lane, host_id, host, revision_id, revision, null);
        }
        
        /// <remarks/>
        public void GetViewLaneDataAsync(WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> revision_id, string revision, object userState) {
            if ((this.GetViewLaneDataOperationCompleted == null)) {
                this.GetViewLaneDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetViewLaneDataOperationCompleted);
            }
            this.InvokeAsync("GetViewLaneData", new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        revision_id,
                        revision}, this.GetViewLaneDataOperationCompleted, userState);
        }
        
        private void OnGetViewLaneDataOperationCompleted(object arg) {
            if ((this.GetViewLaneDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetViewLaneDataCompleted(this, new GetViewLaneDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetFrontPageData", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FrontPageResponse GetFrontPageData(WebServiceLogin login, int limit, string lane, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> lane_id) {
            object[] results = this.Invoke("GetFrontPageData", new object[] {
                        login,
                        limit,
                        lane,
                        lane_id});
            return ((FrontPageResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetFrontPageDataAsync(WebServiceLogin login, int limit, string lane, System.Nullable<int> lane_id) {
            this.GetFrontPageDataAsync(login, limit, lane, lane_id, null);
        }
        
        /// <remarks/>
        public void GetFrontPageDataAsync(WebServiceLogin login, int limit, string lane, System.Nullable<int> lane_id, object userState) {
            if ((this.GetFrontPageDataOperationCompleted == null)) {
                this.GetFrontPageDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFrontPageDataOperationCompleted);
            }
            this.InvokeAsync("GetFrontPageData", new object[] {
                        login,
                        limit,
                        lane,
                        lane_id}, this.GetFrontPageDataOperationCompleted, userState);
        }
        
        private void OnGetFrontPageDataOperationCompleted(object arg) {
            if ((this.GetFrontPageDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFrontPageDataCompleted(this, new GetFrontPageDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetFrontPageData2", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FrontPageResponse GetFrontPageData2(WebServiceLogin login, int limit, string[] lanes, int[] lane_ids) {
            object[] results = this.Invoke("GetFrontPageData2", new object[] {
                        login,
                        limit,
                        lanes,
                        lane_ids});
            return ((FrontPageResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetFrontPageData2Async(WebServiceLogin login, int limit, string[] lanes, int[] lane_ids) {
            this.GetFrontPageData2Async(login, limit, lanes, lane_ids, null);
        }
        
        /// <remarks/>
        public void GetFrontPageData2Async(WebServiceLogin login, int limit, string[] lanes, int[] lane_ids, object userState) {
            if ((this.GetFrontPageData2OperationCompleted == null)) {
                this.GetFrontPageData2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFrontPageData2OperationCompleted);
            }
            this.InvokeAsync("GetFrontPageData2", new object[] {
                        login,
                        limit,
                        lanes,
                        lane_ids}, this.GetFrontPageData2OperationCompleted, userState);
        }
        
        private void OnGetFrontPageData2OperationCompleted(object arg) {
            if ((this.GetFrontPageData2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFrontPageData2Completed(this, new GetFrontPageData2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetLanes", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetLanesResponse GetLanes(WebServiceLogin login) {
            object[] results = this.Invoke("GetLanes", new object[] {
                        login});
            return ((GetLanesResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetLanesAsync(WebServiceLogin login) {
            this.GetLanesAsync(login, null);
        }
        
        /// <remarks/>
        public void GetLanesAsync(WebServiceLogin login, object userState) {
            if ((this.GetLanesOperationCompleted == null)) {
                this.GetLanesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLanesOperationCompleted);
            }
            this.InvokeAsync("GetLanes", new object[] {
                        login}, this.GetLanesOperationCompleted, userState);
        }
        
        private void OnGetLanesOperationCompleted(object arg) {
            if ((this.GetLanesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLanesCompleted(this, new GetLanesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetHosts", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetHostsResponse GetHosts(WebServiceLogin login) {
            object[] results = this.Invoke("GetHosts", new object[] {
                        login});
            return ((GetHostsResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetHostsAsync(WebServiceLogin login) {
            this.GetHostsAsync(login, null);
        }
        
        /// <remarks/>
        public void GetHostsAsync(WebServiceLogin login, object userState) {
            if ((this.GetHostsOperationCompleted == null)) {
                this.GetHostsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHostsOperationCompleted);
            }
            this.InvokeAsync("GetHosts", new object[] {
                        login}, this.GetHostsOperationCompleted, userState);
        }
        
        private void OnGetHostsOperationCompleted(object arg) {
            if ((this.GetHostsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHostsCompleted(this, new GetHostsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/CloneLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CloneLane(WebServiceLogin login, int lane_id, string new_name, bool copy_files) {
            object[] results = this.Invoke("CloneLane", new object[] {
                        login,
                        lane_id,
                        new_name,
                        copy_files});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CloneLaneAsync(WebServiceLogin login, int lane_id, string new_name, bool copy_files) {
            this.CloneLaneAsync(login, lane_id, new_name, copy_files, null);
        }
        
        /// <remarks/>
        public void CloneLaneAsync(WebServiceLogin login, int lane_id, string new_name, bool copy_files, object userState) {
            if ((this.CloneLaneOperationCompleted == null)) {
                this.CloneLaneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloneLaneOperationCompleted);
            }
            this.InvokeAsync("CloneLane", new object[] {
                        login,
                        lane_id,
                        new_name,
                        copy_files}, this.CloneLaneOperationCompleted, userState);
        }
        
        private void OnCloneLaneOperationCompleted(object arg) {
            if ((this.CloneLaneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloneLaneCompleted(this, new CloneLaneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeleteLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteLane(WebServiceLogin login, int lane_id) {
            this.Invoke("DeleteLane", new object[] {
                        login,
                        lane_id});
        }
        
        /// <remarks/>
        public void DeleteLaneAsync(WebServiceLogin login, int lane_id) {
            this.DeleteLaneAsync(login, lane_id, null);
        }
        
        /// <remarks/>
        public void DeleteLaneAsync(WebServiceLogin login, int lane_id, object userState) {
            if ((this.DeleteLaneOperationCompleted == null)) {
                this.DeleteLaneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteLaneOperationCompleted);
            }
            this.InvokeAsync("DeleteLane", new object[] {
                        login,
                        lane_id}, this.DeleteLaneOperationCompleted, userState);
        }
        
        private void OnDeleteLaneOperationCompleted(object arg) {
            if ((this.DeleteLaneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddLane(WebServiceLogin login, string lane) {
            object[] results = this.Invoke("AddLane", new object[] {
                        login,
                        lane});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddLaneAsync(WebServiceLogin login, string lane) {
            this.AddLaneAsync(login, lane, null);
        }
        
        /// <remarks/>
        public void AddLaneAsync(WebServiceLogin login, string lane, object userState) {
            if ((this.AddLaneOperationCompleted == null)) {
                this.AddLaneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddLaneOperationCompleted);
            }
            this.InvokeAsync("AddLane", new object[] {
                        login,
                        lane}, this.AddLaneOperationCompleted, userState);
        }
        
        private void OnAddLaneOperationCompleted(object arg) {
            if ((this.AddLaneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddLaneCompleted(this, new AddLaneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeleteHost", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteHost(WebServiceLogin login, int host_id) {
            this.Invoke("DeleteHost", new object[] {
                        login,
                        host_id});
        }
        
        /// <remarks/>
        public void DeleteHostAsync(WebServiceLogin login, int host_id) {
            this.DeleteHostAsync(login, host_id, null);
        }
        
        /// <remarks/>
        public void DeleteHostAsync(WebServiceLogin login, int host_id, object userState) {
            if ((this.DeleteHostOperationCompleted == null)) {
                this.DeleteHostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteHostOperationCompleted);
            }
            this.InvokeAsync("DeleteHost", new object[] {
                        login,
                        host_id}, this.DeleteHostOperationCompleted, userState);
        }
        
        private void OnDeleteHostOperationCompleted(object arg) {
            if ((this.DeleteHostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteHostCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddHost", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddHost(WebServiceLogin login, string host) {
            object[] results = this.Invoke("AddHost", new object[] {
                        login,
                        host});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddHostAsync(WebServiceLogin login, string host) {
            this.AddHostAsync(login, host, null);
        }
        
        /// <remarks/>
        public void AddHostAsync(WebServiceLogin login, string host, object userState) {
            if ((this.AddHostOperationCompleted == null)) {
                this.AddHostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddHostOperationCompleted);
            }
            this.InvokeAsync("AddHost", new object[] {
                        login,
                        host}, this.AddHostOperationCompleted, userState);
        }
        
        private void OnAddHostOperationCompleted(object arg) {
            if ((this.AddHostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddHostCompleted(this, new AddHostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/ClearRevision", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ClearRevision(WebServiceLogin login, int lane_id, int host_id, int revision_id) {
            this.Invoke("ClearRevision", new object[] {
                        login,
                        lane_id,
                        host_id,
                        revision_id});
        }
        
        /// <remarks/>
        public void ClearRevisionAsync(WebServiceLogin login, int lane_id, int host_id, int revision_id) {
            this.ClearRevisionAsync(login, lane_id, host_id, revision_id, null);
        }
        
        /// <remarks/>
        public void ClearRevisionAsync(WebServiceLogin login, int lane_id, int host_id, int revision_id, object userState) {
            if ((this.ClearRevisionOperationCompleted == null)) {
                this.ClearRevisionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearRevisionOperationCompleted);
            }
            this.InvokeAsync("ClearRevision", new object[] {
                        login,
                        lane_id,
                        host_id,
                        revision_id}, this.ClearRevisionOperationCompleted, userState);
        }
        
        private void OnClearRevisionOperationCompleted(object arg) {
            if ((this.ClearRevisionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearRevisionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/RescheduleRevision", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RescheduleRevision(WebServiceLogin login, int lane_id, int host_id, int revision_id) {
            this.Invoke("RescheduleRevision", new object[] {
                        login,
                        lane_id,
                        host_id,
                        revision_id});
        }
        
        /// <remarks/>
        public void RescheduleRevisionAsync(WebServiceLogin login, int lane_id, int host_id, int revision_id) {
            this.RescheduleRevisionAsync(login, lane_id, host_id, revision_id, null);
        }
        
        /// <remarks/>
        public void RescheduleRevisionAsync(WebServiceLogin login, int lane_id, int host_id, int revision_id, object userState) {
            if ((this.RescheduleRevisionOperationCompleted == null)) {
                this.RescheduleRevisionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRescheduleRevisionOperationCompleted);
            }
            this.InvokeAsync("RescheduleRevision", new object[] {
                        login,
                        lane_id,
                        host_id,
                        revision_id}, this.RescheduleRevisionOperationCompleted, userState);
        }
        
        private void OnRescheduleRevisionOperationCompleted(object arg) {
            if ((this.RescheduleRevisionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RescheduleRevisionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/ClearWork", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ClearWork(WebServiceLogin login, int work_id) {
            this.Invoke("ClearWork", new object[] {
                        login,
                        work_id});
        }
        
        /// <remarks/>
        public void ClearWorkAsync(WebServiceLogin login, int work_id) {
            this.ClearWorkAsync(login, work_id, null);
        }
        
        /// <remarks/>
        public void ClearWorkAsync(WebServiceLogin login, int work_id, object userState) {
            if ((this.ClearWorkOperationCompleted == null)) {
                this.ClearWorkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearWorkOperationCompleted);
            }
            this.InvokeAsync("ClearWork", new object[] {
                        login,
                        work_id}, this.ClearWorkOperationCompleted, userState);
        }
        
        private void OnClearWorkOperationCompleted(object arg) {
            if ((this.ClearWorkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AbortWork", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AbortWork(WebServiceLogin login, int work_id) {
            this.Invoke("AbortWork", new object[] {
                        login,
                        work_id});
        }
        
        /// <remarks/>
        public void AbortWorkAsync(WebServiceLogin login, int work_id) {
            this.AbortWorkAsync(login, work_id, null);
        }
        
        /// <remarks/>
        public void AbortWorkAsync(WebServiceLogin login, int work_id, object userState) {
            if ((this.AbortWorkOperationCompleted == null)) {
                this.AbortWorkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAbortWorkOperationCompleted);
            }
            this.InvokeAsync("AbortWork", new object[] {
                        login,
                        work_id}, this.AbortWorkOperationCompleted, userState);
        }
        
        private void OnAbortWorkOperationCompleted(object arg) {
            if ((this.AbortWorkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AbortWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/PauseWork", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PauseWork(WebServiceLogin login, int work_id) {
            this.Invoke("PauseWork", new object[] {
                        login,
                        work_id});
        }
        
        /// <remarks/>
        public void PauseWorkAsync(WebServiceLogin login, int work_id) {
            this.PauseWorkAsync(login, work_id, null);
        }
        
        /// <remarks/>
        public void PauseWorkAsync(WebServiceLogin login, int work_id, object userState) {
            if ((this.PauseWorkOperationCompleted == null)) {
                this.PauseWorkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPauseWorkOperationCompleted);
            }
            this.InvokeAsync("PauseWork", new object[] {
                        login,
                        work_id}, this.PauseWorkOperationCompleted, userState);
        }
        
        private void OnPauseWorkOperationCompleted(object arg) {
            if ((this.PauseWorkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PauseWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/ResumeWork", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResumeWork(WebServiceLogin login, int work_id) {
            this.Invoke("ResumeWork", new object[] {
                        login,
                        work_id});
        }
        
        /// <remarks/>
        public void ResumeWorkAsync(WebServiceLogin login, int work_id) {
            this.ResumeWorkAsync(login, work_id, null);
        }
        
        /// <remarks/>
        public void ResumeWorkAsync(WebServiceLogin login, int work_id, object userState) {
            if ((this.ResumeWorkOperationCompleted == null)) {
                this.ResumeWorkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResumeWorkOperationCompleted);
            }
            this.InvokeAsync("ResumeWork", new object[] {
                        login,
                        work_id}, this.ResumeWorkOperationCompleted, userState);
        }
        
        private void OnResumeWorkOperationCompleted(object arg) {
            if ((this.ResumeWorkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResumeWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetViewTableData", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetViewTableDataResponse GetViewTableData(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> lane_id, string lane, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> host_id, string host, int page, int page_size) {
            object[] results = this.Invoke("GetViewTableData", new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        page,
                        page_size});
            return ((GetViewTableDataResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetViewTableDataAsync(WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, int page, int page_size) {
            this.GetViewTableDataAsync(login, lane_id, lane, host_id, host, page, page_size, null);
        }
        
        /// <remarks/>
        public void GetViewTableDataAsync(WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, int page, int page_size, object userState) {
            if ((this.GetViewTableDataOperationCompleted == null)) {
                this.GetViewTableDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetViewTableDataOperationCompleted);
            }
            this.InvokeAsync("GetViewTableData", new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        page,
                        page_size}, this.GetViewTableDataOperationCompleted, userState);
        }
        
        private void OnGetViewTableDataOperationCompleted(object arg) {
            if ((this.GetViewTableDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetViewTableDataCompleted(this, new GetViewTableDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetViewWorkTableData", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetViewWorkTableDataResponse GetViewWorkTableData(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> lane_id, string lane, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> host_id, string host, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> command_id, string command) {
            object[] results = this.Invoke("GetViewWorkTableData", new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        command_id,
                        command});
            return ((GetViewWorkTableDataResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetViewWorkTableDataAsync(WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> command_id, string command) {
            this.GetViewWorkTableDataAsync(login, lane_id, lane, host_id, host, command_id, command, null);
        }
        
        /// <remarks/>
        public void GetViewWorkTableDataAsync(WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> command_id, string command, object userState) {
            if ((this.GetViewWorkTableDataOperationCompleted == null)) {
                this.GetViewWorkTableDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetViewWorkTableDataOperationCompleted);
            }
            this.InvokeAsync("GetViewWorkTableData", new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        command_id,
                        command}, this.GetViewWorkTableDataOperationCompleted, userState);
        }
        
        private void OnGetViewWorkTableDataOperationCompleted(object arg) {
            if ((this.GetViewWorkTableDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetViewWorkTableDataCompleted(this, new GetViewWorkTableDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetLaneFileForEdit", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetLaneFileForEditResponse GetLaneFileForEdit(WebServiceLogin login, int lanefile_id) {
            object[] results = this.Invoke("GetLaneFileForEdit", new object[] {
                        login,
                        lanefile_id});
            return ((GetLaneFileForEditResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetLaneFileForEditAsync(WebServiceLogin login, int lanefile_id) {
            this.GetLaneFileForEditAsync(login, lanefile_id, null);
        }
        
        /// <remarks/>
        public void GetLaneFileForEditAsync(WebServiceLogin login, int lanefile_id, object userState) {
            if ((this.GetLaneFileForEditOperationCompleted == null)) {
                this.GetLaneFileForEditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLaneFileForEditOperationCompleted);
            }
            this.InvokeAsync("GetLaneFileForEdit", new object[] {
                        login,
                        lanefile_id}, this.GetLaneFileForEditOperationCompleted, userState);
        }
        
        private void OnGetLaneFileForEditOperationCompleted(object arg) {
            if ((this.GetLaneFileForEditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLaneFileForEditCompleted(this, new GetLaneFileForEditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditLaneFile", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditLaneFile(WebServiceLogin login, DBLanefile lanefile) {
            this.Invoke("EditLaneFile", new object[] {
                        login,
                        lanefile});
        }
        
        /// <remarks/>
        public void EditLaneFileAsync(WebServiceLogin login, DBLanefile lanefile) {
            this.EditLaneFileAsync(login, lanefile, null);
        }
        
        /// <remarks/>
        public void EditLaneFileAsync(WebServiceLogin login, DBLanefile lanefile, object userState) {
            if ((this.EditLaneFileOperationCompleted == null)) {
                this.EditLaneFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditLaneFileOperationCompleted);
            }
            this.InvokeAsync("EditLaneFile", new object[] {
                        login,
                        lanefile}, this.EditLaneFileOperationCompleted, userState);
        }
        
        private void OnEditLaneFileOperationCompleted(object arg) {
            if ((this.EditLaneFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditLaneFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetViewLaneFileHistoryData", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetViewLaneFileHistoryDataResponse GetViewLaneFileHistoryData(WebServiceLogin login, int lanefile_id) {
            object[] results = this.Invoke("GetViewLaneFileHistoryData", new object[] {
                        login,
                        lanefile_id});
            return ((GetViewLaneFileHistoryDataResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetViewLaneFileHistoryDataAsync(WebServiceLogin login, int lanefile_id) {
            this.GetViewLaneFileHistoryDataAsync(login, lanefile_id, null);
        }
        
        /// <remarks/>
        public void GetViewLaneFileHistoryDataAsync(WebServiceLogin login, int lanefile_id, object userState) {
            if ((this.GetViewLaneFileHistoryDataOperationCompleted == null)) {
                this.GetViewLaneFileHistoryDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetViewLaneFileHistoryDataOperationCompleted);
            }
            this.InvokeAsync("GetViewLaneFileHistoryData", new object[] {
                        login,
                        lanefile_id}, this.GetViewLaneFileHistoryDataOperationCompleted, userState);
        }
        
        private void OnGetViewLaneFileHistoryDataOperationCompleted(object arg) {
            if ((this.GetViewLaneFileHistoryDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetViewLaneFileHistoryDataCompleted(this, new GetViewLaneFileHistoryDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetUsers", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetUsersResponse GetUsers(WebServiceLogin login) {
            object[] results = this.Invoke("GetUsers", new object[] {
                        login});
            return ((GetUsersResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsersAsync(WebServiceLogin login) {
            this.GetUsersAsync(login, null);
        }
        
        /// <remarks/>
        public void GetUsersAsync(WebServiceLogin login, object userState) {
            if ((this.GetUsersOperationCompleted == null)) {
                this.GetUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersOperationCompleted);
            }
            this.InvokeAsync("GetUsers", new object[] {
                        login}, this.GetUsersOperationCompleted, userState);
        }
        
        private void OnGetUsersOperationCompleted(object arg) {
            if ((this.GetUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddEnvironmentVariable", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddEnvironmentVariable(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> lane_id, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> host_id, string name, string value) {
            object[] results = this.Invoke("AddEnvironmentVariable", new object[] {
                        login,
                        lane_id,
                        host_id,
                        name,
                        value});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddEnvironmentVariableAsync(WebServiceLogin login, System.Nullable<int> lane_id, System.Nullable<int> host_id, string name, string value) {
            this.AddEnvironmentVariableAsync(login, lane_id, host_id, name, value, null);
        }
        
        /// <remarks/>
        public void AddEnvironmentVariableAsync(WebServiceLogin login, System.Nullable<int> lane_id, System.Nullable<int> host_id, string name, string value, object userState) {
            if ((this.AddEnvironmentVariableOperationCompleted == null)) {
                this.AddEnvironmentVariableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEnvironmentVariableOperationCompleted);
            }
            this.InvokeAsync("AddEnvironmentVariable", new object[] {
                        login,
                        lane_id,
                        host_id,
                        name,
                        value}, this.AddEnvironmentVariableOperationCompleted, userState);
        }
        
        private void OnAddEnvironmentVariableOperationCompleted(object arg) {
            if ((this.AddEnvironmentVariableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEnvironmentVariableCompleted(this, new AddEnvironmentVariableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditEnvironmentVariable", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditEnvironmentVariable(WebServiceLogin login, DBEnvironmentVariable variable) {
            this.Invoke("EditEnvironmentVariable", new object[] {
                        login,
                        variable});
        }
        
        /// <remarks/>
        public void EditEnvironmentVariableAsync(WebServiceLogin login, DBEnvironmentVariable variable) {
            this.EditEnvironmentVariableAsync(login, variable, null);
        }
        
        /// <remarks/>
        public void EditEnvironmentVariableAsync(WebServiceLogin login, DBEnvironmentVariable variable, object userState) {
            if ((this.EditEnvironmentVariableOperationCompleted == null)) {
                this.EditEnvironmentVariableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditEnvironmentVariableOperationCompleted);
            }
            this.InvokeAsync("EditEnvironmentVariable", new object[] {
                        login,
                        variable}, this.EditEnvironmentVariableOperationCompleted, userState);
        }
        
        private void OnEditEnvironmentVariableOperationCompleted(object arg) {
            if ((this.EditEnvironmentVariableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditEnvironmentVariableCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeleteEnvironmentVariable", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteEnvironmentVariable(WebServiceLogin login, int variable_id) {
            this.Invoke("DeleteEnvironmentVariable", new object[] {
                        login,
                        variable_id});
        }
        
        /// <remarks/>
        public void DeleteEnvironmentVariableAsync(WebServiceLogin login, int variable_id) {
            this.DeleteEnvironmentVariableAsync(login, variable_id, null);
        }
        
        /// <remarks/>
        public void DeleteEnvironmentVariableAsync(WebServiceLogin login, int variable_id, object userState) {
            if ((this.DeleteEnvironmentVariableOperationCompleted == null)) {
                this.DeleteEnvironmentVariableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteEnvironmentVariableOperationCompleted);
            }
            this.InvokeAsync("DeleteEnvironmentVariable", new object[] {
                        login,
                        variable_id}, this.DeleteEnvironmentVariableOperationCompleted, userState);
        }
        
        private void OnDeleteEnvironmentVariableOperationCompleted(object arg) {
            if ((this.DeleteEnvironmentVariableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteEnvironmentVariableCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/UploadCompressedFile", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadCompressedFile(WebServiceLogin login, DBWork work, string filename, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] contents, bool hidden, string compressed_mime) {
            this.Invoke("UploadCompressedFile", new object[] {
                        login,
                        work,
                        filename,
                        contents,
                        hidden,
                        compressed_mime});
        }
        
        /// <remarks/>
        public void UploadCompressedFileAsync(WebServiceLogin login, DBWork work, string filename, byte[] contents, bool hidden, string compressed_mime) {
            this.UploadCompressedFileAsync(login, work, filename, contents, hidden, compressed_mime, null);
        }
        
        /// <remarks/>
        public void UploadCompressedFileAsync(WebServiceLogin login, DBWork work, string filename, byte[] contents, bool hidden, string compressed_mime, object userState) {
            if ((this.UploadCompressedFileOperationCompleted == null)) {
                this.UploadCompressedFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadCompressedFileOperationCompleted);
            }
            this.InvokeAsync("UploadCompressedFile", new object[] {
                        login,
                        work,
                        filename,
                        contents,
                        hidden,
                        compressed_mime}, this.UploadCompressedFileOperationCompleted, userState);
        }
        
        private void OnUploadCompressedFileOperationCompleted(object arg) {
            if ((this.UploadCompressedFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadCompressedFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/UploadFile", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadFile(WebServiceLogin login, DBWork work, string filename, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] contents, bool hidden) {
            this.Invoke("UploadFile", new object[] {
                        login,
                        work,
                        filename,
                        contents,
                        hidden});
        }
        
        /// <remarks/>
        public void UploadFileAsync(WebServiceLogin login, DBWork work, string filename, byte[] contents, bool hidden) {
            this.UploadFileAsync(login, work, filename, contents, hidden, null);
        }
        
        /// <remarks/>
        public void UploadFileAsync(WebServiceLogin login, DBWork work, string filename, byte[] contents, bool hidden, object userState) {
            if ((this.UploadFileOperationCompleted == null)) {
                this.UploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileOperationCompleted);
            }
            this.InvokeAsync("UploadFile", new object[] {
                        login,
                        work,
                        filename,
                        contents,
                        hidden}, this.UploadFileOperationCompleted, userState);
        }
        
        private void OnUploadFileOperationCompleted(object arg) {
            if ((this.UploadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetWorkState", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DBState GetWorkState(WebServiceLogin login, DBWork work) {
            object[] results = this.Invoke("GetWorkState", new object[] {
                        login,
                        work});
            return ((DBState)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkStateAsync(WebServiceLogin login, DBWork work) {
            this.GetWorkStateAsync(login, work, null);
        }
        
        /// <remarks/>
        public void GetWorkStateAsync(WebServiceLogin login, DBWork work, object userState) {
            if ((this.GetWorkStateOperationCompleted == null)) {
                this.GetWorkStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkStateOperationCompleted);
            }
            this.InvokeAsync("GetWorkState", new object[] {
                        login,
                        work}, this.GetWorkStateOperationCompleted, userState);
        }
        
        private void OnGetWorkStateOperationCompleted(object arg) {
            if ((this.GetWorkStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkStateCompleted(this, new GetWorkStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/ReportBuildState", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReportBuildStateResponse ReportBuildState(WebServiceLogin login, DBWork work) {
            object[] results = this.Invoke("ReportBuildState", new object[] {
                        login,
                        work});
            return ((ReportBuildStateResponse)(results[0]));
        }
        
        /// <remarks/>
        public void ReportBuildStateAsync(WebServiceLogin login, DBWork work) {
            this.ReportBuildStateAsync(login, work, null);
        }
        
        /// <remarks/>
        public void ReportBuildStateAsync(WebServiceLogin login, DBWork work, object userState) {
            if ((this.ReportBuildStateOperationCompleted == null)) {
                this.ReportBuildStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportBuildStateOperationCompleted);
            }
            this.InvokeAsync("ReportBuildState", new object[] {
                        login,
                        work}, this.ReportBuildStateOperationCompleted, userState);
        }
        
        private void OnReportBuildStateOperationCompleted(object arg) {
            if ((this.ReportBuildStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportBuildStateCompleted(this, new ReportBuildStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetBuildInfo", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetBuildInfoResponse GetBuildInfo(WebServiceLogin login, string host) {
            object[] results = this.Invoke("GetBuildInfo", new object[] {
                        login,
                        host});
            return ((GetBuildInfoResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetBuildInfoAsync(WebServiceLogin login, string host) {
            this.GetBuildInfoAsync(login, host, null);
        }
        
        /// <remarks/>
        public void GetBuildInfoAsync(WebServiceLogin login, string host, object userState) {
            if ((this.GetBuildInfoOperationCompleted == null)) {
                this.GetBuildInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBuildInfoOperationCompleted);
            }
            this.InvokeAsync("GetBuildInfo", new object[] {
                        login,
                        host}, this.GetBuildInfoOperationCompleted, userState);
        }
        
        private void OnGetBuildInfoOperationCompleted(object arg) {
            if ((this.GetBuildInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBuildInfoCompleted(this, new GetBuildInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetBuildInfoMultiple", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetBuildInfoResponse GetBuildInfoMultiple(WebServiceLogin login, string host, bool multiple_work) {
            object[] results = this.Invoke("GetBuildInfoMultiple", new object[] {
                        login,
                        host,
                        multiple_work});
            return ((GetBuildInfoResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetBuildInfoMultipleAsync(WebServiceLogin login, string host, bool multiple_work) {
            this.GetBuildInfoMultipleAsync(login, host, multiple_work, null);
        }
        
        /// <remarks/>
        public void GetBuildInfoMultipleAsync(WebServiceLogin login, string host, bool multiple_work, object userState) {
            if ((this.GetBuildInfoMultipleOperationCompleted == null)) {
                this.GetBuildInfoMultipleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBuildInfoMultipleOperationCompleted);
            }
            this.InvokeAsync("GetBuildInfoMultiple", new object[] {
                        login,
                        host,
                        multiple_work}, this.GetBuildInfoMultipleOperationCompleted, userState);
        }
        
        private void OnGetBuildInfoMultipleOperationCompleted(object arg) {
            if ((this.GetBuildInfoMultipleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBuildInfoMultipleCompleted(this, new GetBuildInfoMultipleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/FindLatestWorkFileId", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> FindLatestWorkFileId(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> lane_id, string lane, string filename, bool completed, bool successful) {
            object[] results = this.Invoke("FindLatestWorkFileId", new object[] {
                        login,
                        lane_id,
                        lane,
                        filename,
                        completed,
                        successful});
            return ((System.Nullable<int>)(results[0]));
        }
        
        /// <remarks/>
        public void FindLatestWorkFileIdAsync(WebServiceLogin login, System.Nullable<int> lane_id, string lane, string filename, bool completed, bool successful) {
            this.FindLatestWorkFileIdAsync(login, lane_id, lane, filename, completed, successful, null);
        }
        
        /// <remarks/>
        public void FindLatestWorkFileIdAsync(WebServiceLogin login, System.Nullable<int> lane_id, string lane, string filename, bool completed, bool successful, object userState) {
            if ((this.FindLatestWorkFileIdOperationCompleted == null)) {
                this.FindLatestWorkFileIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindLatestWorkFileIdOperationCompleted);
            }
            this.InvokeAsync("FindLatestWorkFileId", new object[] {
                        login,
                        lane_id,
                        lane,
                        filename,
                        completed,
                        successful}, this.FindLatestWorkFileIdOperationCompleted, userState);
        }
        
        private void OnFindLatestWorkFileIdOperationCompleted(object arg) {
            if ((this.FindLatestWorkFileIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindLatestWorkFileIdCompleted(this, new FindLatestWorkFileIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/ExecuteScheduler", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecuteScheduler(WebServiceLogin login, bool forcefullupdate) {
            this.Invoke("ExecuteScheduler", new object[] {
                        login,
                        forcefullupdate});
        }
        
        /// <remarks/>
        public void ExecuteSchedulerAsync(WebServiceLogin login, bool forcefullupdate) {
            this.ExecuteSchedulerAsync(login, forcefullupdate, null);
        }
        
        /// <remarks/>
        public void ExecuteSchedulerAsync(WebServiceLogin login, bool forcefullupdate, object userState) {
            if ((this.ExecuteSchedulerOperationCompleted == null)) {
                this.ExecuteSchedulerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteSchedulerOperationCompleted);
            }
            this.InvokeAsync("ExecuteScheduler", new object[] {
                        login,
                        forcefullupdate}, this.ExecuteSchedulerOperationCompleted, userState);
        }
        
        private void OnExecuteSchedulerOperationCompleted(object arg) {
            if ((this.ExecuteSchedulerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteSchedulerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/ExecuteDeletionDirectives", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecuteDeletionDirectives(WebServiceLogin login) {
            this.Invoke("ExecuteDeletionDirectives", new object[] {
                        login});
        }
        
        /// <remarks/>
        public void ExecuteDeletionDirectivesAsync(WebServiceLogin login) {
            this.ExecuteDeletionDirectivesAsync(login, null);
        }
        
        /// <remarks/>
        public void ExecuteDeletionDirectivesAsync(WebServiceLogin login, object userState) {
            if ((this.ExecuteDeletionDirectivesOperationCompleted == null)) {
                this.ExecuteDeletionDirectivesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteDeletionDirectivesOperationCompleted);
            }
            this.InvokeAsync("ExecuteDeletionDirectives", new object[] {
                        login}, this.ExecuteDeletionDirectivesOperationCompleted, userState);
        }
        
        private void OnExecuteDeletionDirectivesOperationCompleted(object arg) {
            if ((this.ExecuteDeletionDirectivesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteDeletionDirectivesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetAdminInfo", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetAdminInfoResponse GetAdminInfo(WebServiceLogin login) {
            object[] results = this.Invoke("GetAdminInfo", new object[] {
                        login});
            return ((GetAdminInfoResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetAdminInfoAsync(WebServiceLogin login) {
            this.GetAdminInfoAsync(login, null);
        }
        
        /// <remarks/>
        public void GetAdminInfoAsync(WebServiceLogin login, object userState) {
            if ((this.GetAdminInfoOperationCompleted == null)) {
                this.GetAdminInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdminInfoOperationCompleted);
            }
            this.InvokeAsync("GetAdminInfo", new object[] {
                        login}, this.GetAdminInfoOperationCompleted, userState);
        }
        
        private void OnGetAdminInfoOperationCompleted(object arg) {
            if ((this.GetAdminInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdminInfoCompleted(this, new GetAdminInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class WebServiceLogin {
        
        private string userField;
        
        private string passwordField;
        
        private string cookieField;
        
        private string ip4Field;
        
        /// <remarks/>
        public string User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string Cookie {
            get {
                return this.cookieField;
            }
            set {
                this.cookieField = value;
            }
        }
        
        /// <remarks/>
        public string Ip4 {
            get {
                return this.ip4Field;
            }
            set {
                this.ip4Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class BuildInfoEntry {
        
        private DBLane laneField;
        
        private DBHostLane hostLaneField;
        
        private DBRevision revisionField;
        
        private DBWorkFile[] filesToDownloadField;
        
        private DBLane[] dependentLaneOfFilesField;
        
        private DBLanefile[] laneFilesField;
        
        private DBWork workField;
        
        private DBCommand commandField;
        
        private DBEnvironmentVariable[] environmentVariablesField;
        
        /// <remarks/>
        public DBLane Lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
            }
        }
        
        /// <remarks/>
        public DBHostLane HostLane {
            get {
                return this.hostLaneField;
            }
            set {
                this.hostLaneField = value;
            }
        }
        
        /// <remarks/>
        public DBRevision Revision {
            get {
                return this.revisionField;
            }
            set {
                this.revisionField = value;
            }
        }
        
        /// <remarks/>
        public DBWorkFile[] FilesToDownload {
            get {
                return this.filesToDownloadField;
            }
            set {
                this.filesToDownloadField = value;
            }
        }
        
        /// <remarks/>
        public DBLane[] DependentLaneOfFiles {
            get {
                return this.dependentLaneOfFilesField;
            }
            set {
                this.dependentLaneOfFilesField = value;
            }
        }
        
        /// <remarks/>
        public DBLanefile[] LaneFiles {
            get {
                return this.laneFilesField;
            }
            set {
                this.laneFilesField = value;
            }
        }
        
        /// <remarks/>
        public DBWork Work {
            get {
                return this.workField;
            }
            set {
                this.workField = value;
            }
        }
        
        /// <remarks/>
        public DBCommand Command {
            get {
                return this.commandField;
            }
            set {
                this.commandField = value;
            }
        }
        
        /// <remarks/>
        public DBEnvironmentVariable[] EnvironmentVariables {
            get {
                return this.environmentVariablesField;
            }
            set {
                this.environmentVariablesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBLane : DBRecord {
        
        private string laneField;
        
        private string source_controlField;
        
        private string repositoryField;
        
        private string min_revisionField;
        
        private string max_revisionField;
        
        private System.Nullable<int> parent_lane_idField;
        
        /// <remarks/>
        public string lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
            }
        }
        
        /// <remarks/>
        public string source_control {
            get {
                return this.source_controlField;
            }
            set {
                this.source_controlField = value;
            }
        }
        
        /// <remarks/>
        public string repository {
            get {
                return this.repositoryField;
            }
            set {
                this.repositoryField = value;
            }
        }
        
        /// <remarks/>
        public string min_revision {
            get {
                return this.min_revisionField;
            }
            set {
                this.min_revisionField = value;
            }
        }
        
        /// <remarks/>
        public string max_revision {
            get {
                return this.max_revisionField;
            }
            set {
                this.max_revisionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> parent_lane_id {
            get {
                return this.parent_lane_idField;
            }
            set {
                this.parent_lane_idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBMasterHost))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBWorkFile))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBWork))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBHostLane))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBRevisionWork))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBRevision))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBFileDeletionDirective))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBLaneDependency))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBLanefile))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBEnvironmentVariable))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBPerson))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBHost))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBView))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBRevisionWorkView))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBRevisionWorkView2))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBWorkFileView))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBWorkView2))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBHostLaneView))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBLaneDeletionDirectiveView))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBLane))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBRecord {
        
        private int idField;
        
        /// <remarks/>
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBMasterHost : DBRecord {
        
        private int host_idField;
        
        private int master_host_idField;
        
        /// <remarks/>
        public int host_id {
            get {
                return this.host_idField;
            }
            set {
                this.host_idField = value;
            }
        }
        
        /// <remarks/>
        public int master_host_id {
            get {
                return this.master_host_idField;
            }
            set {
                this.master_host_idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBWorkFile : DBRecord {
        
        private int work_idField;
        
        private int file_idField;
        
        private bool hiddenField;
        
        private string filenameField;
        
        /// <remarks/>
        public int work_id {
            get {
                return this.work_idField;
            }
            set {
                this.work_idField = value;
            }
        }
        
        /// <remarks/>
        public int file_id {
            get {
                return this.file_idField;
            }
            set {
                this.file_idField = value;
            }
        }
        
        /// <remarks/>
        public bool hidden {
            get {
                return this.hiddenField;
            }
            set {
                this.hiddenField = value;
            }
        }
        
        /// <remarks/>
        public string filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBWork : DBRecord {
        
        private DBState stateField;
        
        private System.Nullable<int> host_idField;
        
        private int command_idField;
        
        private int stateField1;
        
        private System.DateTime starttimeField;
        
        private System.DateTime endtimeField;
        
        private int durationField;
        
        private string logfileField;
        
        private string summaryField;
        
        private int revisionwork_idField;
        
        /// <remarks/>
        public DBState State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> host_id {
            get {
                return this.host_idField;
            }
            set {
                this.host_idField = value;
            }
        }
        
        /// <remarks/>
        public int command_id {
            get {
                return this.command_idField;
            }
            set {
                this.command_idField = value;
            }
        }
        
        /// <remarks/>
        public int state {
            get {
                return this.stateField1;
            }
            set {
                this.stateField1 = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime starttime {
            get {
                return this.starttimeField;
            }
            set {
                this.starttimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime endtime {
            get {
                return this.endtimeField;
            }
            set {
                this.endtimeField = value;
            }
        }
        
        /// <remarks/>
        public int duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        /// <remarks/>
        public string logfile {
            get {
                return this.logfileField;
            }
            set {
                this.logfileField = value;
            }
        }
        
        /// <remarks/>
        public string summary {
            get {
                return this.summaryField;
            }
            set {
                this.summaryField = value;
            }
        }
        
        /// <remarks/>
        public int revisionwork_id {
            get {
                return this.revisionwork_idField;
            }
            set {
                this.revisionwork_idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public enum DBState {
        
        /// <remarks/>
        NotDone,
        
        /// <remarks/>
        Executing,
        
        /// <remarks/>
        Failed,
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        Aborted,
        
        /// <remarks/>
        Timeout,
        
        /// <remarks/>
        Paused,
        
        /// <remarks/>
        Skipped,
        
        /// <remarks/>
        Issues,
        
        /// <remarks/>
        DependencyNotFulfilled,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBHostLane : DBRecord {
        
        private int host_idField;
        
        private int lane_idField;
        
        private bool enabledField;
        
        /// <remarks/>
        public int host_id {
            get {
                return this.host_idField;
            }
            set {
                this.host_idField = value;
            }
        }
        
        /// <remarks/>
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
            }
        }
        
        /// <remarks/>
        public bool enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBRevisionWork : DBRecord {
        
        private DBState stateField;
        
        private int lane_idField;
        
        private int host_idField;
        
        private System.Nullable<int> workhost_idField;
        
        private int revision_idField;
        
        private int stateField1;
        
        private System.DateTime lock_expiresField;
        
        private bool completedField;
        
        private System.DateTime endtimeField;
        
        /// <remarks/>
        public DBState State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
            }
        }
        
        /// <remarks/>
        public int host_id {
            get {
                return this.host_idField;
            }
            set {
                this.host_idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> workhost_id {
            get {
                return this.workhost_idField;
            }
            set {
                this.workhost_idField = value;
            }
        }
        
        /// <remarks/>
        public int revision_id {
            get {
                return this.revision_idField;
            }
            set {
                this.revision_idField = value;
            }
        }
        
        /// <remarks/>
        public int state {
            get {
                return this.stateField1;
            }
            set {
                this.stateField1 = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime lock_expires {
            get {
                return this.lock_expiresField;
            }
            set {
                this.lock_expiresField = value;
            }
        }
        
        /// <remarks/>
        public bool completed {
            get {
                return this.completedField;
            }
            set {
                this.completedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime endtime {
            get {
                return this.endtimeField;
            }
            set {
                this.endtimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBRevision : DBRecord {
        
        private int lane_idField;
        
        private string revisionField;
        
        private string authorField;
        
        private System.DateTime dateField;
        
        private string logField;
        
        private System.Nullable<int> log_file_idField;
        
        private string diffField;
        
        private System.Nullable<int> diff_file_idField;
        
        /// <remarks/>
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
            }
        }
        
        /// <remarks/>
        public string revision {
            get {
                return this.revisionField;
            }
            set {
                this.revisionField = value;
            }
        }
        
        /// <remarks/>
        public string author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public string log {
            get {
                return this.logField;
            }
            set {
                this.logField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> log_file_id {
            get {
                return this.log_file_idField;
            }
            set {
                this.log_file_idField = value;
            }
        }
        
        /// <remarks/>
        public string diff {
            get {
                return this.diffField;
            }
            set {
                this.diffField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> diff_file_id {
            get {
                return this.diff_file_idField;
            }
            set {
                this.diff_file_idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBFileDeletionDirective : DBRecord {
        
        private string nameField;
        
        private string filenameField;
        
        private int match_modeField;
        
        private int conditionField;
        
        private int xField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
            }
        }
        
        /// <remarks/>
        public int match_mode {
            get {
                return this.match_modeField;
            }
            set {
                this.match_modeField = value;
            }
        }
        
        /// <remarks/>
        public int condition {
            get {
                return this.conditionField;
            }
            set {
                this.conditionField = value;
            }
        }
        
        /// <remarks/>
        public int x {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBLaneDependency : DBRecord {
        
        private DBLaneDependencyCondition conditionField;
        
        private int lane_idField;
        
        private int dependent_lane_idField;
        
        private System.Nullable<int> dependent_host_idField;
        
        private int conditionField1;
        
        private string filenameField;
        
        private string download_filesField;
        
        /// <remarks/>
        public DBLaneDependencyCondition Condition {
            get {
                return this.conditionField;
            }
            set {
                this.conditionField = value;
            }
        }
        
        /// <remarks/>
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
            }
        }
        
        /// <remarks/>
        public int dependent_lane_id {
            get {
                return this.dependent_lane_idField;
            }
            set {
                this.dependent_lane_idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> dependent_host_id {
            get {
                return this.dependent_host_idField;
            }
            set {
                this.dependent_host_idField = value;
            }
        }
        
        /// <remarks/>
        public int condition {
            get {
                return this.conditionField1;
            }
            set {
                this.conditionField1 = value;
            }
        }
        
        /// <remarks/>
        public string filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
            }
        }
        
        /// <remarks/>
        public string download_files {
            get {
                return this.download_filesField;
            }
            set {
                this.download_filesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public enum DBLaneDependencyCondition {
        
        /// <remarks/>
        Invalid,
        
        /// <remarks/>
        DependentLaneSuccess,
        
        /// <remarks/>
        DependentLaneSuccessWithFile,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBCommand : DBRecord {
        
        private System.Nullable<int> lane_idField;
        
        private string commandField;
        
        private string filenameField;
        
        private string argumentsField;
        
        private int sequenceField;
        
        private bool alwaysexecuteField;
        
        private bool nonfatalField;
        
        private bool internalField;
        
        private int timeoutField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
            }
        }
        
        /// <remarks/>
        public string command {
            get {
                return this.commandField;
            }
            set {
                this.commandField = value;
            }
        }
        
        /// <remarks/>
        public string filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
            }
        }
        
        /// <remarks/>
        public string arguments {
            get {
                return this.argumentsField;
            }
            set {
                this.argumentsField = value;
            }
        }
        
        /// <remarks/>
        public int sequence {
            get {
                return this.sequenceField;
            }
            set {
                this.sequenceField = value;
            }
        }
        
        /// <remarks/>
        public bool alwaysexecute {
            get {
                return this.alwaysexecuteField;
            }
            set {
                this.alwaysexecuteField = value;
            }
        }
        
        /// <remarks/>
        public bool nonfatal {
            get {
                return this.nonfatalField;
            }
            set {
                this.nonfatalField = value;
            }
        }
        
        /// <remarks/>
        public bool @internal {
            get {
                return this.internalField;
            }
            set {
                this.internalField = value;
            }
        }
        
        /// <remarks/>
        public int timeout {
            get {
                return this.timeoutField;
            }
            set {
                this.timeoutField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBLanefile : DBRecord {
        
        private string nameField;
        
        private string contentsField;
        
        private string mimeField;
        
        private System.Nullable<int> original_idField;
        
        private System.Nullable<System.DateTime> changed_dateField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string contents {
            get {
                return this.contentsField;
            }
            set {
                this.contentsField = value;
            }
        }
        
        /// <remarks/>
        public string mime {
            get {
                return this.mimeField;
            }
            set {
                this.mimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> original_id {
            get {
                return this.original_idField;
            }
            set {
                this.original_idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> changed_date {
            get {
                return this.changed_dateField;
            }
            set {
                this.changed_dateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBEnvironmentVariable : DBRecord {
        
        private System.Nullable<int> host_idField;
        
        private System.Nullable<int> lane_idField;
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> host_id {
            get {
                return this.host_idField;
            }
            set {
                this.host_idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBPerson : DBRecord {
        
        private string loginField;
        
        private string passwordField;
        
        private string fullnameField;
        
        private string rolesField;
        
        /// <remarks/>
        public string login {
            get {
                return this.loginField;
            }
            set {
                this.loginField = value;
            }
        }
        
        /// <remarks/>
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string fullname {
            get {
                return this.fullnameField;
            }
            set {
                this.fullnameField = value;
            }
        }
        
        /// <remarks/>
        public string roles {
            get {
                return this.rolesField;
            }
            set {
                this.rolesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBHost : DBRecord {
        
        private string hostField;
        
        private string descriptionField;
        
        private string architectureField;
        
        private int queuemanagementField;
        
        private bool enabledField;
        
        /// <remarks/>
        public string host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
            }
        }
        
        /// <remarks/>
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string architecture {
            get {
                return this.architectureField;
            }
            set {
                this.architectureField = value;
            }
        }
        
        /// <remarks/>
        public int queuemanagement {
            get {
                return this.queuemanagementField;
            }
            set {
                this.queuemanagementField = value;
            }
        }
        
        /// <remarks/>
        public bool enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBRevisionWorkView))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBRevisionWorkView2))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBWorkFileView))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBWorkView2))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBHostLaneView))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBLaneDeletionDirectiveView))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBView : DBRecord {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBRevisionWorkView : DBView {
        
        private int command_idField;
        
        private int stateField;
        
        private System.DateTime starttimeField;
        
        private int durationField;
        
        private string logfileField;
        
        private string summaryField;
        
        private string hostField;
        
        private string laneField;
        
        private string authorField;
        
        private string revisionField;
        
        private string commandField;
        
        private bool nonfatalField;
        
        private bool alwaysexecuteField;
        
        private int sequenceField;
        
        private bool internalField;
        
        private int lane_idField;
        
        private int host_idField;
        
        private int revision_idField;
        
        private int revisionwork_stateField;
        
        private string workhostField;
        
        /// <remarks/>
        public int command_id {
            get {
                return this.command_idField;
            }
            set {
                this.command_idField = value;
            }
        }
        
        /// <remarks/>
        public int state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime starttime {
            get {
                return this.starttimeField;
            }
            set {
                this.starttimeField = value;
            }
        }
        
        /// <remarks/>
        public int duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        /// <remarks/>
        public string logfile {
            get {
                return this.logfileField;
            }
            set {
                this.logfileField = value;
            }
        }
        
        /// <remarks/>
        public string summary {
            get {
                return this.summaryField;
            }
            set {
                this.summaryField = value;
            }
        }
        
        /// <remarks/>
        public string host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
            }
        }
        
        /// <remarks/>
        public string lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
            }
        }
        
        /// <remarks/>
        public string author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
            }
        }
        
        /// <remarks/>
        public string revision {
            get {
                return this.revisionField;
            }
            set {
                this.revisionField = value;
            }
        }
        
        /// <remarks/>
        public string command {
            get {
                return this.commandField;
            }
            set {
                this.commandField = value;
            }
        }
        
        /// <remarks/>
        public bool nonfatal {
            get {
                return this.nonfatalField;
            }
            set {
                this.nonfatalField = value;
            }
        }
        
        /// <remarks/>
        public bool alwaysexecute {
            get {
                return this.alwaysexecuteField;
            }
            set {
                this.alwaysexecuteField = value;
            }
        }
        
        /// <remarks/>
        public int sequence {
            get {
                return this.sequenceField;
            }
            set {
                this.sequenceField = value;
            }
        }
        
        /// <remarks/>
        public bool @internal {
            get {
                return this.internalField;
            }
            set {
                this.internalField = value;
            }
        }
        
        /// <remarks/>
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
            }
        }
        
        /// <remarks/>
        public int host_id {
            get {
                return this.host_idField;
            }
            set {
                this.host_idField = value;
            }
        }
        
        /// <remarks/>
        public int revision_id {
            get {
                return this.revision_idField;
            }
            set {
                this.revision_idField = value;
            }
        }
        
        /// <remarks/>
        public int revisionwork_state {
            get {
                return this.revisionwork_stateField;
            }
            set {
                this.revisionwork_stateField = value;
            }
        }
        
        /// <remarks/>
        public string workhost {
            get {
                return this.workhostField;
            }
            set {
                this.workhostField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBRevisionWorkView2 : DBView {
        
        private DBState stateField;
        
        private int lane_idField;
        
        private int host_idField;
        
        private int revision_idField;
        
        private int stateField1;
        
        private bool completedField;
        
        private string revisionField;
        
        private System.DateTime dateField;
        
        /// <remarks/>
        public DBState State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
            }
        }
        
        /// <remarks/>
        public int host_id {
            get {
                return this.host_idField;
            }
            set {
                this.host_idField = value;
            }
        }
        
        /// <remarks/>
        public int revision_id {
            get {
                return this.revision_idField;
            }
            set {
                this.revision_idField = value;
            }
        }
        
        /// <remarks/>
        public int state {
            get {
                return this.stateField1;
            }
            set {
                this.stateField1 = value;
            }
        }
        
        /// <remarks/>
        public bool completed {
            get {
                return this.completedField;
            }
            set {
                this.completedField = value;
            }
        }
        
        /// <remarks/>
        public string revision {
            get {
                return this.revisionField;
            }
            set {
                this.revisionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBWorkFileView : DBView {
        
        private int work_idField;
        
        private int file_idField;
        
        private string filenameField;
        
        private bool hiddenField;
        
        private string mimeField;
        
        private string compressed_mimeField;
        
        private string md5Field;
        
        private bool internalField;
        
        private System.Nullable<int> file_file_idField;
        
        /// <remarks/>
        public int work_id {
            get {
                return this.work_idField;
            }
            set {
                this.work_idField = value;
            }
        }
        
        /// <remarks/>
        public int file_id {
            get {
                return this.file_idField;
            }
            set {
                this.file_idField = value;
            }
        }
        
        /// <remarks/>
        public string filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
            }
        }
        
        /// <remarks/>
        public bool hidden {
            get {
                return this.hiddenField;
            }
            set {
                this.hiddenField = value;
            }
        }
        
        /// <remarks/>
        public string mime {
            get {
                return this.mimeField;
            }
            set {
                this.mimeField = value;
            }
        }
        
        /// <remarks/>
        public string compressed_mime {
            get {
                return this.compressed_mimeField;
            }
            set {
                this.compressed_mimeField = value;
            }
        }
        
        /// <remarks/>
        public string md5 {
            get {
                return this.md5Field;
            }
            set {
                this.md5Field = value;
            }
        }
        
        /// <remarks/>
        public bool @internal {
            get {
                return this.internalField;
            }
            set {
                this.internalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> file_file_id {
            get {
                return this.file_file_idField;
            }
            set {
                this.file_file_idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBWorkView2 : DBView {
        
        private string laneField;
        
        private int command_idField;
        
        private int stateField;
        
        private System.DateTime starttimeField;
        
        private System.DateTime endtimeField;
        
        private int durationField;
        
        private string logfileField;
        
        private string summaryField;
        
        private System.Nullable<int> workhost_idField;
        
        private bool nonfatalField;
        
        private bool alwaysexecuteField;
        
        private int sequenceField;
        
        private bool internalField;
        
        private string commandField;
        
        private int revisionwork_idField;
        
        private int masterhost_idField;
        
        private int lane_idField;
        
        private int revision_idField;
        
        private string masterhostField;
        
        private string workhostField;
        
        private string authorField;
        
        private string revisionField;
        
        /// <remarks/>
        public string lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
            }
        }
        
        /// <remarks/>
        public int command_id {
            get {
                return this.command_idField;
            }
            set {
                this.command_idField = value;
            }
        }
        
        /// <remarks/>
        public int state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime starttime {
            get {
                return this.starttimeField;
            }
            set {
                this.starttimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime endtime {
            get {
                return this.endtimeField;
            }
            set {
                this.endtimeField = value;
            }
        }
        
        /// <remarks/>
        public int duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        /// <remarks/>
        public string logfile {
            get {
                return this.logfileField;
            }
            set {
                this.logfileField = value;
            }
        }
        
        /// <remarks/>
        public string summary {
            get {
                return this.summaryField;
            }
            set {
                this.summaryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> workhost_id {
            get {
                return this.workhost_idField;
            }
            set {
                this.workhost_idField = value;
            }
        }
        
        /// <remarks/>
        public bool nonfatal {
            get {
                return this.nonfatalField;
            }
            set {
                this.nonfatalField = value;
            }
        }
        
        /// <remarks/>
        public bool alwaysexecute {
            get {
                return this.alwaysexecuteField;
            }
            set {
                this.alwaysexecuteField = value;
            }
        }
        
        /// <remarks/>
        public int sequence {
            get {
                return this.sequenceField;
            }
            set {
                this.sequenceField = value;
            }
        }
        
        /// <remarks/>
        public bool @internal {
            get {
                return this.internalField;
            }
            set {
                this.internalField = value;
            }
        }
        
        /// <remarks/>
        public string command {
            get {
                return this.commandField;
            }
            set {
                this.commandField = value;
            }
        }
        
        /// <remarks/>
        public int revisionwork_id {
            get {
                return this.revisionwork_idField;
            }
            set {
                this.revisionwork_idField = value;
            }
        }
        
        /// <remarks/>
        public int masterhost_id {
            get {
                return this.masterhost_idField;
            }
            set {
                this.masterhost_idField = value;
            }
        }
        
        /// <remarks/>
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
            }
        }
        
        /// <remarks/>
        public int revision_id {
            get {
                return this.revision_idField;
            }
            set {
                this.revision_idField = value;
            }
        }
        
        /// <remarks/>
        public string masterhost {
            get {
                return this.masterhostField;
            }
            set {
                this.masterhostField = value;
            }
        }
        
        /// <remarks/>
        public string workhost {
            get {
                return this.workhostField;
            }
            set {
                this.workhostField = value;
            }
        }
        
        /// <remarks/>
        public string author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
            }
        }
        
        /// <remarks/>
        public string revision {
            get {
                return this.revisionField;
            }
            set {
                this.revisionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBHostLaneView : DBView {
        
        private int lane_idField;
        
        private int host_idField;
        
        private bool enabledField;
        
        private string laneField;
        
        private string hostField;
        
        /// <remarks/>
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
            }
        }
        
        /// <remarks/>
        public int host_id {
            get {
                return this.host_idField;
            }
            set {
                this.host_idField = value;
            }
        }
        
        /// <remarks/>
        public bool enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <remarks/>
        public string lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
            }
        }
        
        /// <remarks/>
        public string host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBLaneDeletionDirectiveView : DBView {
        
        private int lane_idField;
        
        private int file_deletion_directive_idField;
        
        private bool enabledField;
        
        private string nameField;
        
        private string filenameField;
        
        private int match_modeField;
        
        private int conditionField;
        
        private int xField;
        
        /// <remarks/>
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
            }
        }
        
        /// <remarks/>
        public int file_deletion_directive_id {
            get {
                return this.file_deletion_directive_idField;
            }
            set {
                this.file_deletion_directive_idField = value;
            }
        }
        
        /// <remarks/>
        public bool enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
            }
        }
        
        /// <remarks/>
        public int match_mode {
            get {
                return this.match_modeField;
            }
            set {
                this.match_modeField = value;
            }
        }
        
        /// <remarks/>
        public int condition {
            get {
                return this.conditionField;
            }
            set {
                this.conditionField = value;
            }
        }
        
        /// <remarks/>
        public int x {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetAdminInfoResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetBuildInfoResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReportBuildStateResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetUsersResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetViewLaneFileHistoryDataResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetLaneFileForEditResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetViewWorkTableDataResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetViewTableDataResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetHostsResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetLanesResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FrontPageResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetViewLaneDataResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FindLaneResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FindRevisionResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FindHostResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetLaneForEditResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetHostForEditResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetLaneResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LoginResponse))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class WebServiceResponse {
        
        private string[] userRolesField;
        
        /// <remarks/>
        public string[] UserRoles {
            get {
                return this.userRolesField;
            }
            set {
                this.userRolesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetAdminInfoResponse : WebServiceResponse {
        
        private bool isSchedulerExecutingField;
        
        private bool isDeletionDirectivesExecutingField;
        
        /// <remarks/>
        public bool IsSchedulerExecuting {
            get {
                return this.isSchedulerExecutingField;
            }
            set {
                this.isSchedulerExecutingField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDeletionDirectivesExecuting {
            get {
                return this.isDeletionDirectivesExecutingField;
            }
            set {
                this.isDeletionDirectivesExecutingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetBuildInfoResponse : WebServiceResponse {
        
        private DBHost hostField;
        
        private BuildInfoEntry[][] workField;
        
        private DBMasterHost[] masterHostsField;
        
        /// <remarks/>
        public DBHost Host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfBuildInfoEntry")]
        [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public BuildInfoEntry[][] Work {
            get {
                return this.workField;
            }
            set {
                this.workField = value;
            }
        }
        
        /// <remarks/>
        public DBMasterHost[] MasterHosts {
            get {
                return this.masterHostsField;
            }
            set {
                this.masterHostsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class ReportBuildStateResponse : WebServiceResponse {
        
        private DBWork workField;
        
        private bool revisionWorkCompletedField;
        
        /// <remarks/>
        public DBWork Work {
            get {
                return this.workField;
            }
            set {
                this.workField = value;
            }
        }
        
        /// <remarks/>
        public bool RevisionWorkCompleted {
            get {
                return this.revisionWorkCompletedField;
            }
            set {
                this.revisionWorkCompletedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetUsersResponse : WebServiceResponse {
        
        private DBPerson[] usersField;
        
        /// <remarks/>
        public DBPerson[] Users {
            get {
                return this.usersField;
            }
            set {
                this.usersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetViewLaneFileHistoryDataResponse : WebServiceResponse {
        
        private DBLanefile[] lanefilesField;
        
        /// <remarks/>
        public DBLanefile[] Lanefiles {
            get {
                return this.lanefilesField;
            }
            set {
                this.lanefilesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetLaneFileForEditResponse : WebServiceResponse {
        
        private DBLanefile lanefileField;
        
        private DBLane[] lanesField;
        
        /// <remarks/>
        public DBLanefile Lanefile {
            get {
                return this.lanefileField;
            }
            set {
                this.lanefileField = value;
            }
        }
        
        /// <remarks/>
        public DBLane[] Lanes {
            get {
                return this.lanesField;
            }
            set {
                this.lanesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetViewWorkTableDataResponse : WebServiceResponse {
        
        private DBLane laneField;
        
        private DBHost hostField;
        
        private DBCommand commandField;
        
        private DBWorkView2[] workViewsField;
        
        private DBWorkFileView[][] workFileViewsField;
        
        /// <remarks/>
        public DBLane Lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
            }
        }
        
        /// <remarks/>
        public DBHost Host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
            }
        }
        
        /// <remarks/>
        public DBCommand Command {
            get {
                return this.commandField;
            }
            set {
                this.commandField = value;
            }
        }
        
        /// <remarks/>
        public DBWorkView2[] WorkViews {
            get {
                return this.workViewsField;
            }
            set {
                this.workViewsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfDBWorkFileView")]
        [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public DBWorkFileView[][] WorkFileViews {
            get {
                return this.workFileViewsField;
            }
            set {
                this.workFileViewsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetViewTableDataResponse : WebServiceResponse {
        
        private int pageField;
        
        private int pageSizeField;
        
        private int countField;
        
        private DBLane laneField;
        
        private DBHost hostField;
        
        private DBRevisionWorkView[] revisionWorkViewsField;
        
        /// <remarks/>
        public int Page {
            get {
                return this.pageField;
            }
            set {
                this.pageField = value;
            }
        }
        
        /// <remarks/>
        public int PageSize {
            get {
                return this.pageSizeField;
            }
            set {
                this.pageSizeField = value;
            }
        }
        
        /// <remarks/>
        public int Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        public DBLane Lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
            }
        }
        
        /// <remarks/>
        public DBHost Host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
            }
        }
        
        /// <remarks/>
        public DBRevisionWorkView[] RevisionWorkViews {
            get {
                return this.revisionWorkViewsField;
            }
            set {
                this.revisionWorkViewsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetHostsResponse : WebServiceResponse {
        
        private DBHost[] hostsField;
        
        /// <remarks/>
        public DBHost[] Hosts {
            get {
                return this.hostsField;
            }
            set {
                this.hostsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetLanesResponse : WebServiceResponse {
        
        private DBLane[] lanesField;
        
        /// <remarks/>
        public DBLane[] Lanes {
            get {
                return this.lanesField;
            }
            set {
                this.lanesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class FrontPageResponse : WebServiceResponse {
        
        private DBLane laneField;
        
        private DBLane[] selectedLanesField;
        
        private DBLane[] lanesField;
        
        private DBHost[] hostsField;
        
        private DBHostLane[] hostLanesField;
        
        private int[] revisionWorkHostLaneRelationField;
        
        private DBRevisionWorkView2[][] revisionWorkViewsField;
        
        /// <remarks/>
        public DBLane Lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
            }
        }
        
        /// <remarks/>
        public DBLane[] SelectedLanes {
            get {
                return this.selectedLanesField;
            }
            set {
                this.selectedLanesField = value;
            }
        }
        
        /// <remarks/>
        public DBLane[] Lanes {
            get {
                return this.lanesField;
            }
            set {
                this.lanesField = value;
            }
        }
        
        /// <remarks/>
        public DBHost[] Hosts {
            get {
                return this.hostsField;
            }
            set {
                this.hostsField = value;
            }
        }
        
        /// <remarks/>
        public DBHostLane[] HostLanes {
            get {
                return this.hostLanesField;
            }
            set {
                this.hostLanesField = value;
            }
        }
        
        /// <remarks/>
        public int[] RevisionWorkHostLaneRelation {
            get {
                return this.revisionWorkHostLaneRelationField;
            }
            set {
                this.revisionWorkHostLaneRelationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfDBRevisionWorkView2")]
        [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public DBRevisionWorkView2[][] RevisionWorkViews {
            get {
                return this.revisionWorkViewsField;
            }
            set {
                this.revisionWorkViewsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetViewLaneDataResponse : WebServiceResponse {
        
        private System.DateTime nowField;
        
        private DBLane laneField;
        
        private DBHost hostField;
        
        private DBHost workHostField;
        
        private DBRevision revisionField;
        
        private DBRevisionWork revisionWorkField;
        
        private DBWorkView2[] workViewsField;
        
        private DBWorkFileView[][] workFileViewsField;
        
        /// <remarks/>
        public System.DateTime Now {
            get {
                return this.nowField;
            }
            set {
                this.nowField = value;
            }
        }
        
        /// <remarks/>
        public DBLane Lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
            }
        }
        
        /// <remarks/>
        public DBHost Host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
            }
        }
        
        /// <remarks/>
        public DBHost WorkHost {
            get {
                return this.workHostField;
            }
            set {
                this.workHostField = value;
            }
        }
        
        /// <remarks/>
        public DBRevision Revision {
            get {
                return this.revisionField;
            }
            set {
                this.revisionField = value;
            }
        }
        
        /// <remarks/>
        public DBRevisionWork RevisionWork {
            get {
                return this.revisionWorkField;
            }
            set {
                this.revisionWorkField = value;
            }
        }
        
        /// <remarks/>
        public DBWorkView2[] WorkViews {
            get {
                return this.workViewsField;
            }
            set {
                this.workViewsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfDBWorkFileView")]
        [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public DBWorkFileView[][] WorkFileViews {
            get {
                return this.workFileViewsField;
            }
            set {
                this.workFileViewsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class FindLaneResponse : WebServiceResponse {
        
        private DBLane laneField;
        
        /// <remarks/>
        public DBLane lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class FindRevisionResponse : WebServiceResponse {
        
        private DBRevision revisionField;
        
        /// <remarks/>
        public DBRevision Revision {
            get {
                return this.revisionField;
            }
            set {
                this.revisionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class FindHostResponse : WebServiceResponse {
        
        private DBHost hostField;
        
        /// <remarks/>
        public DBHost Host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetLaneForEditResponse : WebServiceResponse {
        
        private DBLane laneField;
        
        private DBLanefile[] filesField;
        
        private DBLanefile[] existingFilesField;
        
        private DBCommand[] commandsField;
        
        private DBHostLaneView[] hostLaneViewsField;
        
        private DBHost[] hostsField;
        
        private DBLane[] lanesField;
        
        private DBLaneDependency[] dependenciesField;
        
        private DBLaneDeletionDirectiveView[] laneDeletionDirectivesField;
        
        private DBFileDeletionDirective[] fileDeletionDirectivesField;
        
        private DBEnvironmentVariable[] variablesField;
        
        /// <remarks/>
        public DBLane Lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
            }
        }
        
        /// <remarks/>
        public DBLanefile[] Files {
            get {
                return this.filesField;
            }
            set {
                this.filesField = value;
            }
        }
        
        /// <remarks/>
        public DBLanefile[] ExistingFiles {
            get {
                return this.existingFilesField;
            }
            set {
                this.existingFilesField = value;
            }
        }
        
        /// <remarks/>
        public DBCommand[] Commands {
            get {
                return this.commandsField;
            }
            set {
                this.commandsField = value;
            }
        }
        
        /// <remarks/>
        public DBHostLaneView[] HostLaneViews {
            get {
                return this.hostLaneViewsField;
            }
            set {
                this.hostLaneViewsField = value;
            }
        }
        
        /// <remarks/>
        public DBHost[] Hosts {
            get {
                return this.hostsField;
            }
            set {
                this.hostsField = value;
            }
        }
        
        /// <remarks/>
        public DBLane[] Lanes {
            get {
                return this.lanesField;
            }
            set {
                this.lanesField = value;
            }
        }
        
        /// <remarks/>
        public DBLaneDependency[] Dependencies {
            get {
                return this.dependenciesField;
            }
            set {
                this.dependenciesField = value;
            }
        }
        
        /// <remarks/>
        public DBLaneDeletionDirectiveView[] LaneDeletionDirectives {
            get {
                return this.laneDeletionDirectivesField;
            }
            set {
                this.laneDeletionDirectivesField = value;
            }
        }
        
        /// <remarks/>
        public DBFileDeletionDirective[] FileDeletionDirectives {
            get {
                return this.fileDeletionDirectivesField;
            }
            set {
                this.fileDeletionDirectivesField = value;
            }
        }
        
        /// <remarks/>
        public DBEnvironmentVariable[] Variables {
            get {
                return this.variablesField;
            }
            set {
                this.variablesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetHostForEditResponse : WebServiceResponse {
        
        private DBHost hostField;
        
        private DBPerson personField;
        
        private DBHostLaneView[] hostLaneViewsField;
        
        private DBLane[] lanesField;
        
        private DBEnvironmentVariable[] variablesField;
        
        private DBHost[] masterHostsField;
        
        private DBHost[] slaveHostsField;
        
        private DBHost[] hostsField;
        
        /// <remarks/>
        public DBHost Host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
            }
        }
        
        /// <remarks/>
        public DBPerson Person {
            get {
                return this.personField;
            }
            set {
                this.personField = value;
            }
        }
        
        /// <remarks/>
        public DBHostLaneView[] HostLaneViews {
            get {
                return this.hostLaneViewsField;
            }
            set {
                this.hostLaneViewsField = value;
            }
        }
        
        /// <remarks/>
        public DBLane[] Lanes {
            get {
                return this.lanesField;
            }
            set {
                this.lanesField = value;
            }
        }
        
        /// <remarks/>
        public DBEnvironmentVariable[] Variables {
            get {
                return this.variablesField;
            }
            set {
                this.variablesField = value;
            }
        }
        
        /// <remarks/>
        public DBHost[] MasterHosts {
            get {
                return this.masterHostsField;
            }
            set {
                this.masterHostsField = value;
            }
        }
        
        /// <remarks/>
        public DBHost[] SlaveHosts {
            get {
                return this.slaveHostsField;
            }
            set {
                this.slaveHostsField = value;
            }
        }
        
        /// <remarks/>
        public DBHost[] Hosts {
            get {
                return this.hostsField;
            }
            set {
                this.hostsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetLaneResponse : WebServiceResponse {
        
        private DBLane laneField;
        
        /// <remarks/>
        public DBLane lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class LoginResponse : WebServiceResponse {
        
        private string userField;
        
        private string cookieField;
        
        private string fullNameField;
        
        private int idField;
        
        /// <remarks/>
        public string User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        public string Cookie {
            get {
                return this.cookieField;
            }
            set {
                this.cookieField = value;
            }
        }
        
        /// <remarks/>
        public string FullName {
            get {
                return this.fullNameField;
            }
            set {
                this.fullNameField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public enum DBMatchMode {
        
        /// <remarks/>
        ShellGlobs,
        
        /// <remarks/>
        RegExp,
        
        /// <remarks/>
        Exact,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public enum DBDeleteCondition {
        
        /// <remarks/>
        Never,
        
        /// <remarks/>
        AfterXDays,
        
        /// <remarks/>
        AfterXBuiltRevisions,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetRolesCompletedEventHandler(object sender, GetRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LoginResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LoginResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CreateLanefileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AttachFileToLaneCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeattachFileFromLaneCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void EditCommandFilenameCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void EditCommandSequenceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void EditCommandArgumentsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void EditCommandTimeoutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SwitchCommandNonFatalCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SwitchCommandAlwaysExecuteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SwitchCommandInternalCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteCommandCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AddCommandCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SwitchHostEnabledForLaneCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RemoveHostForLaneCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AddHostToLaneCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AddDependencyToLaneCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void EditLaneDependencyFilenameCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteLaneDependencyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void EditLaneDependencyDownloadsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void UnlinkDeletionDirectiveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteDeletionDirectiveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void EnableDeletionDirectiveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AddFileDeletionDirectiveCompletedEventHandler(object sender, AddFileDeletionDirectiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFileDeletionDirectiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFileDeletionDirectiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AddLaneDeletionDirectiveCompletedEventHandler(object sender, AddLaneDeletionDirectiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddLaneDeletionDirectiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddLaneDeletionDirectiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void FindLaneDeletionDirectiveCompletedEventHandler(object sender, FindLaneDeletionDirectiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindLaneDeletionDirectiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindLaneDeletionDirectiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DBLaneDeletionDirectiveView Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DBLaneDeletionDirectiveView)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetLaneCompletedEventHandler(object sender, GetLaneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLaneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLaneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetLaneResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetLaneResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHostForEditCompletedEventHandler(object sender, GetHostForEditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHostForEditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHostForEditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetHostForEditResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetHostForEditResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AddMasterHostCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RemoveMasterHostCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetLaneForEditCompletedEventHandler(object sender, GetLaneForEditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLaneForEditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLaneForEditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetLaneForEditResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetLaneForEditResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void FindHostCompletedEventHandler(object sender, FindHostCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindHostCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindHostCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FindHostResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FindHostResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void FindRevisionCompletedEventHandler(object sender, FindRevisionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindRevisionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindRevisionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FindRevisionResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FindRevisionResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void FindLaneCompletedEventHandler(object sender, FindLaneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindLaneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindLaneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FindLaneResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FindLaneResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void EditLaneCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void EditHostCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void EditHostWithPasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetViewLaneDataCompletedEventHandler(object sender, GetViewLaneDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetViewLaneDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetViewLaneDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetViewLaneDataResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetViewLaneDataResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetFrontPageDataCompletedEventHandler(object sender, GetFrontPageDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFrontPageDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFrontPageDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FrontPageResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FrontPageResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetFrontPageData2CompletedEventHandler(object sender, GetFrontPageData2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFrontPageData2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFrontPageData2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FrontPageResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FrontPageResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetLanesCompletedEventHandler(object sender, GetLanesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLanesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLanesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetLanesResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetLanesResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHostsCompletedEventHandler(object sender, GetHostsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHostsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHostsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetHostsResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetHostsResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CloneLaneCompletedEventHandler(object sender, CloneLaneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CloneLaneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CloneLaneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteLaneCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AddLaneCompletedEventHandler(object sender, AddLaneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddLaneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddLaneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteHostCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AddHostCompletedEventHandler(object sender, AddHostCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddHostCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddHostCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ClearRevisionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RescheduleRevisionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ClearWorkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AbortWorkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void PauseWorkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ResumeWorkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetViewTableDataCompletedEventHandler(object sender, GetViewTableDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetViewTableDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetViewTableDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetViewTableDataResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetViewTableDataResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetViewWorkTableDataCompletedEventHandler(object sender, GetViewWorkTableDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetViewWorkTableDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetViewWorkTableDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetViewWorkTableDataResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetViewWorkTableDataResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetLaneFileForEditCompletedEventHandler(object sender, GetLaneFileForEditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLaneFileForEditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLaneFileForEditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetLaneFileForEditResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetLaneFileForEditResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void EditLaneFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetViewLaneFileHistoryDataCompletedEventHandler(object sender, GetViewLaneFileHistoryDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetViewLaneFileHistoryDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetViewLaneFileHistoryDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetViewLaneFileHistoryDataResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetViewLaneFileHistoryDataResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetUsersCompletedEventHandler(object sender, GetUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetUsersResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetUsersResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AddEnvironmentVariableCompletedEventHandler(object sender, AddEnvironmentVariableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEnvironmentVariableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEnvironmentVariableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void EditEnvironmentVariableCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteEnvironmentVariableCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void UploadCompressedFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void UploadFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetWorkStateCompletedEventHandler(object sender, GetWorkStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DBState Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DBState)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ReportBuildStateCompletedEventHandler(object sender, ReportBuildStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportBuildStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportBuildStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReportBuildStateResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReportBuildStateResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetBuildInfoCompletedEventHandler(object sender, GetBuildInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBuildInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBuildInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetBuildInfoResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetBuildInfoResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetBuildInfoMultipleCompletedEventHandler(object sender, GetBuildInfoMultipleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBuildInfoMultipleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBuildInfoMultipleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetBuildInfoResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetBuildInfoResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void FindLatestWorkFileIdCompletedEventHandler(object sender, FindLatestWorkFileIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindLatestWorkFileIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindLatestWorkFileIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Nullable<int> Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<int>)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ExecuteSchedulerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ExecuteDeletionDirectivesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAdminInfoCompletedEventHandler(object sender, GetAdminInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdminInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdminInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetAdminInfoResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetAdminInfoResponse)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591